<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>OSChina</title><link>http://my.oschina.net</link><description>2016-05-04</description><pubDate>Wed, 04 May 2016 10:18:47 GMT</pubDate><lastBuildDate>Wed, 04 May 2016 10:18:47 GMT</lastBuildDate><generator>PyRSS2Gen-1.1.0</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>thinkphp_3.2.1 -  未来微微笑94的个人空间 - 开源中国社区</title><link>http://my.oschina.net/u/2493156/blog/669410</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt; 心得体会：多理解编程思想、多查阅api文档、项目架构、如何设计 &lt;/p&gt;
&lt;p&gt; &lt;br/&gt; &lt;/p&gt;
&lt;p&gt; 1.使用框架 &lt;/p&gt;
&lt;p&gt; 在http://www.thinkphp.cn/下载需要框架。 &lt;/p&gt;
&lt;p&gt; 在zend studio下创建localphpproject 文件-》保存地址为AppServ\www\project2（这样可以用localhost访问）-》删除index.php文件-》将下载的框架文件复制到项目里面（这里会string.class会报错，直接把string 改革名字就行） &lt;/p&gt;
&lt;p&gt; 浏览器访问：http://localhost:8080/project2/demo1_thinkphp_3.2.1/ &lt;/p&gt;
&lt;p&gt; &lt;br/&gt; &lt;/p&gt;
&lt;p&gt; 2.模块化配置前台和后台 &lt;/p&gt;
&lt;p&gt; 先在index.php下定义应用目录作为应用程序-》打开网页刷新-》点击编辑器刷新 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;pre class="brush:php; toolbar: true; auto-links: false;"&gt;// 定义应用目录
define('APP_PATH','./WeiBo/');&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; 在生成的weibo目录下新建文件夹Admin-&amp;gt;直接将Home文件夹复制再改名就可以了 &lt;/p&gt;
&lt;p&gt; 再将Admin 下IndexController.class.php的命名空间改为use Think\Controller; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;pre class="brush:php; toolbar: true; auto-links: false;"&gt;&amp;lt;?php
// 本类由系统自动生成，仅供测试用途
namespace Admin\Controller;
use Think\Controller;
class IndexController extends Controller {
    public function index(){
	echo "houtai ";

    }
}&lt;/pre&gt;
&lt;p&gt; &lt;br/&gt; &lt;/p&gt;
&lt;p&gt; &lt;br/&gt; &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt; 这样就实现了前后台模块化，公共使用核心配置文件 &lt;/p&gt;
&lt;p&gt; 3.导入乱码 &lt;/p&gt;
&lt;p&gt; properties-&amp;gt;resource-&amp;gt;other-&amp;gt;Utf-8 &lt;/p&gt;
&lt;p&gt; &lt;br/&gt; &lt;/p&gt;
&lt;p&gt; &lt;br/&gt; &lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:49</pubDate></item><item><title>已有的游戏如何快速稳定迁移到云上? -  热爱Linux,热爱开源，为开源献出自己的一份力量！ - 开源中国社区</title><link>http://my.oschina.net/linuxprobe/blog/669407</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;云平台的是一个大的发展趋势，结合作者的一些经验，谈谈游戏使用公有云的一些心得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;决定迁移之前就面临好多问题，比如：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;云主机性能能否满足要求；
云主机的配置如何确定；
已有的大量数据如何迁移；
原来的脚本到云上能否使用&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关于云主机性能和配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云主机的性能能否满足要求，如何确定云主机的配置，没有捷径，就是做好充足的测试，结合机器人和真人，各种条件都模拟下，觉得测试差不多了，可以考虑开放一组对外的测试服，取得相关的压力数据，有了数据，云主机的配置也就很好确定了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于数据迁移&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据迁移确实是一个难题，许多游戏虽然是&lt;a href="http://www.linuxprobe.com/chapter-06/" rel="nofollow" target="_blank"&gt;分区&lt;/a&gt;分组，但是数据库是多个区组共用。要将游戏迁移到云上，可能面临大量数据，在短短的维护时间无法迁移到云上的问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有三种方案解决这个问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蚂蚁搬家，逐步迁移，但是这样特别消耗时间。&lt;br/&gt;云供应商协商，临时拉一条专线，这样时间会快很多。&lt;br/&gt;使用移动硬盘拷贝数据，通过快递先复制大量数据，然后维护时间同步很少的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于以前的脚本和网络兼容&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在游戏的日常运维中，运维工程师可能有大量的脚本，迁移到云上能否继续使用也是一个问题，如果操作系统和原来的版本一致，一般问题不大。但是还有一 点要注意，脚本如果和IP地址有关系，在原有的物理机环境中，一般IP有两个，外网和内网IP，大部分公有云都是只有一个内网IP，外网IP是映射的。国 内阿里云、盛大游戏G云，云主机上是同时内外网共存，在网络这里保证了和物理机的兼容，使用起来比较方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于磁盘空间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;公有云的云主机通常都是模版克隆出来的，为了快速克隆，模版一般磁盘空间都比较小，数据存储在另外添加的第二块磁盘上，使用需要分区、格式化、挂 载。这里往往容易忽视，经常是第一块磁盘写满了，出现了问题，才发现没有将数据写到第二快磁盘上。在使用云主机的时候，需要检查下磁盘，最好能有一个初始 化脚本专门做这个事情。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;游戏被攻击了如何处理？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;游戏被攻击是比较头痛的事情，但是游戏如果放到了云上，这个麻烦就丢给了云供应商，嘿嘿，云确实为客户节省了不少事情。&lt;/p&gt;
&lt;p&gt;&lt;img alt="game togo cloud" height="305" src="http://static.oschina.net/uploads/img/201605/04094529_lcXv.jpg" title="" width="500"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:45</pubDate></item><item><title>OC中手写代码与xib结合实例 -  AppleDream的个人空间 - 开源中国社区</title><link>http://my.oschina.net/HYLApple/blog/669405</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;&lt;a href="http://git.oschina.net/HYLAppleDream/iOS/tree/master/UIScrollView%E6%B5%8B%E8%AF%95?dir=1&amp;amp;filepath=UIScrollView%E6%B5%8B%E8%AF%95&amp;amp;oid=60eec7b050ecd71ec43b7e06ced81c35a44a1462&amp;amp;sha=8f9375442c7f2f32b7fbb33d8bd6d36451af1a82" rel="nofollow" target="_blank"&gt;github代码地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一：首先说明下，何为封装一个自己的控件？其实简单来说，封装一个自己的控件就封装一个像UIView与UIButton这类的。可以通过代码创建一个自己封装的控件&lt;/p&gt;
&lt;p&gt;第二：控件封装哪些东西？在这个之间，我们来看纯代码封装一个控件需要封装哪些东西(纯代码封装的实例&lt;a href="http://git.oschina.net/HYLAppleDream/iOS/tree/master/%E7%BA%AF%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85%EF%BC%8D%E5%B0%81%E8%A3%85-init?dir=1&amp;amp;filepath=%E7%BA%AF%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85%EF%BC%8D%E5%B0%81%E8%A3%85-init&amp;amp;oid=576d43474ed448ba83c54a062e8e9dbe64d31a07&amp;amp;sha=8f9375442c7f2f32b7fbb33d8bd6d36451af1a82" rel="nofollow" target="_blank"&gt;github代码地址&lt;/a&gt;)；第一：你要能返回一个控件对象（即你了的控件中包括了哪些子控件）；第二：重写layoutSubViews方法，这个方法会监听控件的大小变化，来重新定义子控件的CGRectMake；第三：模型（对模型不是很清楚的话&lt;a href="http://my.oschina.net/HYLApple/blog/668959" rel="nofollow" target="_blank"&gt;请点这里&lt;/a&gt;）控件需要的数据一般从模型中获得；至此，一个控件类对控件的画分基本就成型了，这三块逻辑互相独立，耦合性较低；接下来就是xib为我们解决了这三块之中的哪些？它解决了子控件的添加与子控件的&lt;span style="line-height: 23px;"&gt;CGRectMake两块，数据，仍然需要自己，所以，xib为我们省了两件事，毕竟图形界面比手打的要快，而且也很好维护。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="line-height: 23px;"&gt;第三：说完了控件类如何，再来说下主控件器里好何写了，首先：我们还是以UIView控件手打代码创建为例：&lt;/span&gt;&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;//手打代码，没有Xcode，所写代码能看懂就好，如有错误欢迎指出
UIView *view=[[UIView alloc]init];
view.fram=CGRectMake(0,0,100,100);
[self.view.addSubViews view];


//而我们创建自己封装的控件应如何呢
//其实就比UIView多了一步，添加模型(数据)
UIView *view=[[UIView alloc]init];//自己的控件类像这样实例化，一般会封装一下调用类构造方法
//添加模型
view.fram=CGRectMake(0,0,100,100);//下面两句一样
[self.view.addSubViews view];
//构架已说完，血肉请看github上面的代码&lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="line-height: 23px;"&gt;&lt;/span&gt;第四：说一个注意点，就是使用xib的时候，独立控件的对象要设置成你所封装的类，不然会报错，错误很常见。&lt;/p&gt;
&lt;p&gt;而纯代码是没有这样的问题；导致问题的原因是，xib返回实例的时候是加载xib对象的，默认是UIView.&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:43</pubDate></item><item><title>iOS中KeyChain用途 -  水一样的人儿的个人空间 - 开源中国社区</title><link>http://my.oschina.net/u/2560887/blog/669404</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt; &lt;span style="color:#333333;font-family:宋体;font-size:14px;background-color:#F9F9F9;"&gt;一、在应用间利用KeyChain共享数据&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; &lt;span style="color:#333333;font-family:宋体;font-size:14px;background-color:#F9F9F9;"&gt;我们可以把KeyChain理解为一个Dictionary，所有数据都以key-value的形式存储，可以对这个Dictionary进行add、update、get、delete这四个操作。对于每一个应用来说，KeyChain都有两个访问区，私有区和公共区。私有区是一个sandbox，本程序存储的任何数据都对其他程序不可见。而要想在将存储的内容放在公共区，需要先声明公共区的名称，&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; &lt;span style="color:#333333;font-family:宋体;font-size:14px;background-color:#F9F9F9;"&gt;二、保存私密信息&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; &lt;span style="color:#333333;font-family:宋体;font-size:14px;background-color:#F9F9F9;"&gt;iOS的keychain服务提供了一种安全的保存私密信息（密码，序列号，证书等）的方式，每个ios程序都有一个独立的keychain存储。相对于NSUserDefaults、文件保存等一般方式，keychain保存更为安全，而且keychain里保存的信息不会因App被删除而丢失，所以在重装App后，keychain里的数据还能使用。&lt;/span&gt; &lt;/p&gt;
&lt;p&gt; 参考：http://www.2cto.com/kf/201311/255684.html和 &lt;/p&gt;
&lt;p&gt; http://blog.csdn.net/wonengxing/article/details/42142595 &lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:39</pubDate></item><item><title>ChemDraw Std绘制化学键的技巧 -  学术研究软件 - 开源中国社区</title><link>http://my.oschina.net/xueshusoft/blog/669403</link><description>&lt;div class="BlogContent"&gt;&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;在化学教学研究中如果需要绘制化学键，一般都会使用ChemDraw Std来绘制，由于ChemDraw Std绘制化学键轻松快捷，使用的人比较多。下面说明ChemDraw Std的基本绘图技巧，本教程将向大家介绍如何简单地绘制化学键。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;绘图过程中，ChemBioDraw可以帮你检查对应的化学名称。如果有错误，错误对象的周围将出现一个红色边框（红色边框不会被打印）。右键单击对象，可以禁用红色边框，取消显示警告。&lt;/span&gt;&lt;/p&gt;
&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/093800_n2WL_2611420.jpg"/&gt; &lt;/span&gt;
&lt;br/&gt;
&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;ChemDraw Std化学名称&lt;/span&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;如果键角和长度固定，点击对象-&amp;gt;固定长度和固定角度。这保证了键长、键角的一致性，创建化学键过程如下：&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;1.浏览视图-&amp;gt;显示主工具栏。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;2.在主工具栏上，选择固体化学键工具。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;3.单击文档窗口中，出现化学键。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;4.点击刚刚创建的化学键的右端，即可添加第二个键。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;此时，两键形成120度角。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="margin: 0px; padding: 0px; font-family: 宋体; font-size: 16px;"&gt;通过上文化学键的绘制，相信大家已经学会如何在ChemDraw Std中绘制化学键，更多ChemDraw Std教程，可访问ChemDraw中文官网。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; padding: 0px; color: rgb(51, 51, 51); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.3333px; line-height: 24px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:38</pubDate></item><item><title>java如何获取SQL查询结果集中的行数和列数 -  路人甲123的个人页面 - 开源中国社区</title><link>http://my.oschina.net/passer007/blog/669400</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;在Java中，获得ResultSet的总行数的方法有以下几种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一种：利用ResultSet的getRow方法来获得ResultSet的总行数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE); &lt;br/&gt;ResultSet rset = stmt.executeQuery("select * from yourTableName"); &lt;br/&gt;rset.last(); &lt;br/&gt;int rowCount = rset.getRow(); //获得ResultSet的总行数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二种：利用循环ResultSet的元素来获得ResultSet的总行数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ResultSet rset = stmt.executeQuery("select * from yourTableName"); &lt;br/&gt;int rowCount = 0; &lt;br/&gt;while(rset.next()) { &lt;br/&gt;   rowCount++; &lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;rowCount就是ResultSet的总行数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三种：利用sql语句中的count函数获得ResultSet的总行数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ResultSet rset = stmt.executeQuery("select count(*) totalCount from yourTableName"); &lt;br/&gt;int rowCount = 0; &lt;br/&gt;if(rset.next()) { &lt;br/&gt;   rowCount=rset .getInt("totalCount "); &lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;rowCount就是ResultSet的总行数。&lt;/p&gt;
&lt;p&gt;·                                *****************************************************************************************************************&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;·Java中获得ResultSet的总列数是非常简单事情，因为Java中ResultSet提供了ResultSetMetaData工具类,ResultSetMetaData 是ResultSet的元数据的集合说明。&lt;/p&gt;
&lt;p&gt;java获得ResultSet总列数的代码如下：&lt;/p&gt;
&lt;p&gt;Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE); &lt;br/&gt;ResultSet rset = stmt.executeQuery("select * from yourtable"); &lt;br/&gt;ResultSetMetaData rsmd = rset.getMetaData() ; &lt;br/&gt;int columnCount = rsmd.getColumnCount();&lt;/p&gt;
&lt;p&gt;columnCount 就是ResultSet的总列数。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:26</pubDate></item><item><title>struts2 spring hibernate执行流程 -  李永china的个人空间 - 开源中国社区</title><link>http://my.oschina.net/chenliyong/blog/669399</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;&lt;strong&gt;Struts2 Hibernate Spring 运行流程与部分机制&lt;/strong&gt;&lt;br/&gt;Tomcat容器被加载，找到该webApplication相对应的web.xml&lt;br/&gt; 开始解析web.xml中的信息&lt;br/&gt;&lt;br/&gt;读取到一个spring的监听器，告诉spring容器开始初始化配置文件中的信息,spring容器配置文件默认applicationContext.xml&lt;br/&gt;&amp;lt;listener&amp;gt;&lt;br/&gt; &amp;lt;listener-class&amp;gt; org.springframework.web.context.ContextLoaderListener&lt;br/&gt; &amp;lt;/listener-class&amp;gt;&lt;br/&gt; &amp;lt;/listener&amp;gt;&lt;br/&gt;&lt;br/&gt;容器开始实例化spring相关bean和配置文件，&lt;br/&gt;Spring容器创建dataSource数据源，&lt;br/&gt;创建hibernate的sessionFactory（传入dataSource）&lt;br/&gt;创建操作数据库所需的操作模板HibernateTemplate(传入sessionFactory)&lt;br/&gt;并扫描生成配置文件中的bean（IOC注入）&lt;br/&gt;生成各个dao 传入hibernateTemplate&lt;br/&gt;生成各个service 传入相对应的dao&lt;br/&gt;（初始化工作完成，等待用户的请求，只初始化spring容器中的bean）&lt;br/&gt;spring容器初始化完成（如果action是prototype,不是单例的话）&lt;br/&gt;action如果是单例就会先初始化action,service,dao,hibernateTemplate,sessionFactory,datasource）&lt;br/&gt;&lt;br/&gt;一个请求发送到tomcat（产生了HttpServletRequest）&lt;br/&gt;Tomcat接收到请求根据url寻找web application，开始加载该web application的web.xml&lt;br/&gt;读取到&lt;br/&gt; &amp;lt;filter&amp;gt;&lt;br/&gt; &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;&lt;br/&gt; &amp;lt;filter-class&amp;gt;&lt;br/&gt; org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;br/&gt; &amp;lt;/filter-class&amp;gt;&lt;br/&gt; &amp;lt;/filter&amp;gt;&lt;br/&gt; &amp;lt;filter-mapping&amp;gt;&lt;br/&gt; &amp;lt;filter-name&amp;gt;struts2&amp;lt;/filter-name&amp;gt;&lt;br/&gt; &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;&lt;br/&gt; &amp;lt;/filter-mapping&amp;gt;&lt;br/&gt;的时候&lt;br/&gt;&lt;br/&gt;1.通过filter过滤所有的url,调用把请求传给StrutsPrepareAndExecuteFilter(前端控制器)&lt;br/&gt;开始struts2的工作&lt;br/&gt;struts2一起动就会去加载配置文件，其中包括struts—plugin。xml读取顺序：&lt;br/&gt; &lt;br/&gt;struts-default.xml &lt;br/&gt;struts-plugin.xml&lt;br/&gt;(struts2-spring-plugin.jar中的配置文件中的&lt;br/&gt;&amp;lt;constant name="struts.objectFactory" value="spring" /&amp;gt;，这句配置就指明了我们产生struts对象的工厂交给spring来产生，如果action配置了注解，则交给spring在最初的时候产 生，如果没有，则由struts2和plugin插件产生)&lt;br/&gt;struts.xml&lt;br/&gt;struts.properties&lt;br/&gt;web.xml&lt;br/&gt;&lt;br/&gt;2.StrutsPrepareAndExecuteFilter调用actionMapper来确定是否&lt;br/&gt;有action需要调用&lt;br/&gt;3.如果actionMapper确定请求需要调用某个action，那么StrutsPrepareAndExecuteFilter&lt;br/&gt;调用Dispatcher类中的serviceAction方法产生valuestack(值栈)与 actioncontext（action上下文）并产生actionproxy代理对象 &lt;br/&gt;把请求的处理交给actionProxy&lt;br/&gt;4.actionProxy通过configurationManager查看struts.xml&lt;br/&gt;来找到需要调用的action和action所有的配置信息(拦截器，转换器等)&lt;br/&gt;5.actionProxy创建一个actionInvocation的实例。&lt;br/&gt;6.actionInvocation使用命令模式在action的前后来调用配置文件中&lt;br/&gt;配置的拦截器和拦截器栈（比如将HttpServletRequest的参数解析出来封装成对象传给action）&lt;br/&gt;（通过xml的代码然后再解析xml文档用dom解析或者sax解析，得到xml的内容和节点，然后通过反射技术，进行java类的加载以及方法的加载 ）&lt;br/&gt;7.调用完拦截器后调用action对应的方法方法处理请求（页面控制器）&lt;br/&gt;8.由struts2生成action或者spring产生的，并struts-spring-plugin插件将action中所需的serviceImpl在spring容器中寻找并将实例传入action（或者由工厂模式提供serviceImpl组件的实例）&lt;br/&gt;9.action调用service,service调用dao&lt;br/&gt;dao层中调用hibernateTemplate的相关方法完成数据库操作将结果逐层返回给action&lt;br/&gt;10.action返回试图名&lt;br/&gt;10.actionInvacation根据struts.xml中action返回的视图名对应result的值寻找到对应的视图将视图和返回值结合(jsp拿到值)并产生新的jsp返回给上层的filter。&lt;br/&gt;StrutsPrepareAndExecuteFilter将jsp返回给tomcat&lt;br/&gt;Tomcat的jsp引擎(org.apache.jasper.servlet.JspServlet)生成serlvet源程序(.java文件)&lt;br/&gt;.之后又将Servlet源程序编译为.class类文件；编译成.class文件后返回给用户产生html&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;一。Struts2生成action&lt;br/&gt;不声明@Component，由struts2生成的action（默认是prototype一个请求new一个）&lt;br/&gt;action中需要访问的service层的对象生成的set方法由struts-spring-plugin.jar这个jar包 帮我们去spring容器中找与set方法名字一样的bean帮我们注入,&lt;br/&gt;注意这里struts-spring-plugin提供的注入方法是不可替换的，即使&lt;br/&gt;使用@Resource指定其他的实现也无效。&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;二。Spring生成action&lt;br/&gt;由Spring容器生成的action，配置了@Component和@Scope("prototype")  struts,xml中action的class属性指定成&lt;br/&gt;@Component的value&lt;br/&gt;该action中的service的set方法 需要使用@Resource注入，struts-spring-plugin 则不会自动去spring容器中寻找相应的bean&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;注意： &lt;br/&gt;如果action不使用@Component("actionName") 那么action是由struts2产生，如果加上@Component("u") 则struts.xml中的&lt;br/&gt;&amp;lt;action name="u" class="u"&amp;gt; 的class要为u,则为spring产生的action，struts2找action的时候，去spring容器中找action&lt;br/&gt;&lt;br/&gt;刚工作不久，自己总结的，如果错误以及不正确的地方，欢迎大家指正哈。  &lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 09:26</pubDate></item><item><title>电商领域中SKU和SPU区别比较 -  陈小扁的个人页面 - 开源中国社区</title><link>http://my.oschina.net/chenxiaobian/blog/669389</link><description>&lt;div class="BlogContent"&gt;&lt;span id="OSC_h1_1"&gt;&lt;/span&gt;
&lt;h1&gt;电商领域中SKU和SPU区别比较&lt;/h1&gt;
&lt;p&gt;在电商领域中我们或许会经常听到两个术语SKU和SPU, 那么什么是SKU和SPU呢, 让我们来仔细分析比较一下吧&lt;/p&gt;
&lt;p&gt;SPU(Standard Product Unit) 标准产品单位，是一个商品集合, 该集合描述了一个产品的特性, 通俗的讲, 属性值&lt;/p&gt;
&lt;p&gt;特性相同的商品可以称为一个SPU&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;SKU(Stock Keeping Unit) 库存量单位， SKU即库存进出计量单位，可以是以件，盒，托盘等为单位， SKU是物理&lt;/p&gt;
&lt;p&gt;上不可分割的最小存货单元, 尤其在服装，鞋类商品中使用最为普遍&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;总结一下：&lt;/p&gt;
&lt;p&gt;SPU是商品编码, SKU是商品下的一个分类属性(商品下一个颜色或者尺码)&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;最形象的例子:&lt;/p&gt;
&lt;p&gt;SPU就是一个苹果6&lt;/p&gt;
&lt;p&gt;SKU就是银色苹果6，灰色苹果6，土豪金苹果6&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 08:45</pubDate></item><item><title>编译原理词法分析 -  赤尔宝丁的个人空间 - 开源中国社区</title><link>http://my.oschina.net/u/2303983/blog/669387</link><description>&lt;div class="BlogContent"&gt;&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;学习计算机或者软件工程的人都知道编译原理是一门非常重要的课程，下面是本人学习编译原理过后写的词法分析的源码，喜欢的可以看看，顺便我附上一个下载地址：&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;地址一:&lt;a href="http://www.quzhuanpan.com/home/sourceList.jsp?type=6" rel="nofollow"&gt;http://www.quzhuanpan.com/home/sourceList.jsp?type=6&lt;/a&gt; &lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;地址二: http://www.quzhuanpan.com/download/checkResult.action?id=29&amp;amp;type=6&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;#include &amp;lt;iostream&amp;gt;&lt;br/&gt;#include &amp;lt;string.h&amp;gt;&lt;br/&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br/&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;br/&gt;#include &amp;lt;map&amp;gt;&lt;br/&gt;#include &amp;lt;set&amp;gt;&lt;br/&gt;#include &amp;lt;sstream&amp;gt;&lt;br/&gt;using namespace std;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;class Content&lt;br/&gt;{&lt;br/&gt;private:&lt;br/&gt;int id;&lt;br/&gt;int forToken;&lt;br/&gt;string content;&lt;br/&gt;char character;&lt;br/&gt;char *token;&lt;br/&gt;char *characterSet;&lt;br/&gt;int c;&lt;br/&gt;string str;&lt;br/&gt;map&amp;lt;int,string&amp;gt; store;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;public:&lt;br/&gt;string getStr();&lt;br/&gt;long getLength();&lt;br/&gt;int getC();&lt;br/&gt;void display();&lt;br/&gt;bool operator==(char rch);&lt;br/&gt;Content(string content);&lt;br/&gt;~Content();&lt;br/&gt;void stringToChar();&lt;br/&gt;char get_Char();&lt;br/&gt;bool getbe();&lt;br/&gt;void concatenation();&lt;br/&gt;bool letter();&lt;br/&gt;bool digit();&lt;br/&gt;int reserve();&lt;br/&gt;void retract();&lt;br/&gt;void buildList();&lt;br/&gt;string error();&lt;br/&gt;string analysis();&lt;br/&gt;};&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;//bool Content::operator==(char rch){&lt;br/&gt;// char lch;&lt;br/&gt;// if(strcpy(&amp;amp;lch,&amp;amp;rch)==0){&lt;br/&gt;// return 1;&lt;br/&gt;// }&lt;br/&gt;// else&lt;br/&gt;// return 0;&lt;br/&gt;//}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;Content::Content(string _content)&lt;br/&gt;{&lt;br/&gt;content=_content;&lt;br/&gt;c=0;&lt;br/&gt;id=0;&lt;br/&gt;character=' ';&lt;br/&gt;forToken=0;&lt;br/&gt;str="";&lt;br/&gt;characterSet=new char[content.length()+1];//最后又'\0'&lt;br/&gt;token=new char[100];&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;Content::~Content()&lt;br/&gt;{&lt;br/&gt;free(characterSet);&lt;br/&gt;free(token);&lt;br/&gt;delete []characterSet;&lt;br/&gt;delete []token;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;void Content::stringToChar()&lt;br/&gt;{&lt;br/&gt;strcpy(characterSet,content.c_str());&lt;br/&gt;//返回的是const char*，也就是字符数组的首地址&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;/*&lt;br/&gt;www.panmama.com &lt;br/&gt;转载请务必告知&lt;br/&gt;*/&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;int Content::getC()&lt;br/&gt;{&lt;br/&gt;return c;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;long Content::getLength()&lt;br/&gt;{&lt;br/&gt;return content.length();&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;char Content::get_Char()&lt;br/&gt;{&lt;br/&gt;character=characterSet[c];&lt;br/&gt;if(!(character==' ')||!(character!='\n')||!(character!='\t'))&lt;br/&gt;{&lt;br/&gt;c++;&lt;br/&gt;}//非空符号，指针向后加1&lt;br/&gt;return character;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;bool Content::getbe()&lt;br/&gt;{&lt;br/&gt;if(character==' '||character=='\n'||character=='\t')&lt;br/&gt;{&lt;br/&gt;c++;&lt;br/&gt;return 1;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;return 0;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;void Content::display()&lt;br/&gt;{&lt;br/&gt;for(int i=0; i&amp;lt;content.length(); i++)&lt;br/&gt;{&lt;br/&gt;cout&amp;lt;&amp;lt;content.length();&lt;br/&gt;cout&amp;lt;&amp;lt;characterSet[i]&amp;lt;&amp;lt;endl;&lt;br/&gt;}&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;void Content::concatenation()&lt;br/&gt;{&lt;br/&gt;token[forToken]=character;&lt;br/&gt;forToken++;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;string Content::getStr(){&lt;br/&gt;int i=0;&lt;br/&gt;string s="";&lt;br/&gt;while(token[i]!=' ')&lt;br/&gt;{&lt;br/&gt;s+=token[i];&lt;br/&gt;i++;&lt;br/&gt;}&lt;br/&gt;return s;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;bool Content::digit()&lt;br/&gt;{&lt;br/&gt;if(character&amp;gt;='0'&amp;amp;&amp;amp;character&amp;lt;='9')&lt;br/&gt;return true;&lt;br/&gt;return false;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;bool Content::letter()&lt;br/&gt;{&lt;br/&gt;if((character&amp;gt;='a'&amp;amp;&amp;amp;character&amp;lt;='z')||(character&amp;gt;='A'&amp;amp;&amp;amp;character&amp;lt;='Z'))&lt;br/&gt;{&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;return true;&lt;br/&gt;}&lt;br/&gt;return false;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;int Content::reserve()&lt;br/&gt;{&lt;br/&gt;// int i=0;&lt;br/&gt;// str="";&lt;br/&gt;// while(token[i]!=' ')&lt;br/&gt;// {&lt;br/&gt;// str+=token[i];&lt;br/&gt;// i++;&lt;br/&gt;// }&lt;br/&gt;str=getStr();&lt;br/&gt;if(str=="if")&lt;br/&gt;{&lt;br/&gt;return 4;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;else if(str=="int")&lt;br/&gt;{&lt;br/&gt;return 1;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;else if(str=="for")&lt;br/&gt;{&lt;br/&gt;return 6;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;else if(str=="char")&lt;br/&gt;{&lt;br/&gt;return 3;&lt;br/&gt;}&lt;br/&gt;else if(str=="void")&lt;br/&gt;{&lt;br/&gt;return 12;&lt;br/&gt;}&lt;br/&gt;else if(str=="main")&lt;br/&gt;{&lt;br/&gt;return 2;&lt;br/&gt;}&lt;br/&gt;else if(str=="else")&lt;br/&gt;{&lt;br/&gt;return 5;&lt;br/&gt;}&lt;br/&gt;else if(str=="case")&lt;br/&gt;{&lt;br/&gt;return 9;&lt;br/&gt;}&lt;br/&gt;else if(str=="while")&lt;br/&gt;{&lt;br/&gt;return 7;&lt;br/&gt;}&lt;br/&gt;else if(str=="float")&lt;br/&gt;{&lt;br/&gt;return 11;&lt;br/&gt;}&lt;br/&gt;else if(str=="const")&lt;br/&gt;{&lt;br/&gt;return 12;&lt;br/&gt;}&lt;br/&gt;else if(str=="break")&lt;br/&gt;{&lt;br/&gt;return 13;&lt;br/&gt;}&lt;br/&gt;else if(str=="switch")&lt;br/&gt;{&lt;br/&gt;return 8;&lt;br/&gt;}&lt;br/&gt;else if(str=="return")&lt;br/&gt;{&lt;br/&gt;return 14;&lt;br/&gt;}&lt;br/&gt;else if(str=="switch")&lt;br/&gt;{&lt;br/&gt;return 8;&lt;br/&gt;}&lt;br/&gt;else if(str=="double")&lt;br/&gt;{&lt;br/&gt;return 15;&lt;br/&gt;}&lt;br/&gt;else if(str=="string")&lt;br/&gt;{&lt;br/&gt;return 16;&lt;br/&gt;}&lt;br/&gt;else if(str=="printf")&lt;br/&gt;{&lt;br/&gt;return 17;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;else&lt;br/&gt;{&lt;br/&gt;return 0;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;void Content::retract()&lt;br/&gt;{&lt;br/&gt;c--;&lt;br/&gt;character=' ';&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;void Content::buildList()&lt;br/&gt;{&lt;br/&gt;//id=18;&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(1,"int"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(2,"main"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(3,"char"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(4,"if"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(5,"else"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(6,"for"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(7,"while"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(8,"switch"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(9,"case"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(11,"float"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(12,"const"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(13,"break"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(14,"return"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(15,"double"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(16,"string"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(17,"printf"));&lt;br/&gt;store.insert(pair&amp;lt;int,string&amp;gt;(id,str));&lt;br/&gt;// if(id!=20)&lt;br/&gt;// id++;&lt;br/&gt;// else&lt;br/&gt;// id=21;&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;string Content::error()&lt;br/&gt;{&lt;br/&gt;return "有误";&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;string Content::analysis()&lt;br/&gt;{&lt;br/&gt;char s;&lt;br/&gt;string num;&lt;br/&gt;int k;&lt;br/&gt;for(int i=0; i&amp;lt;100; i++)&lt;br/&gt;{&lt;br/&gt;token[i]=' ';&lt;br/&gt;}&lt;br/&gt;s=get_Char();//从数组中取一个字符&lt;br/&gt;if(getbe())//是空格&lt;br/&gt;return "";//是空格返回“”&lt;br/&gt;switch(s)&lt;br/&gt;{&lt;br/&gt;case 'a':&lt;br/&gt;case 'b':&lt;br/&gt;case 'c':&lt;br/&gt;case 'd':&lt;br/&gt;case 'e':&lt;br/&gt;case 'f':&lt;br/&gt;case 'g':&lt;br/&gt;case 'h':&lt;br/&gt;case 'i':&lt;br/&gt;case 'j':&lt;br/&gt;case 'k':&lt;br/&gt;case 'l':&lt;br/&gt;case 'm':&lt;br/&gt;case 'n':&lt;br/&gt;case 'o':&lt;br/&gt;case 'p':&lt;br/&gt;case 'q':&lt;br/&gt;case 'r':&lt;br/&gt;case 's':&lt;br/&gt;case 't':&lt;br/&gt;case 'u':&lt;br/&gt;case 'v':&lt;br/&gt;case 'w':&lt;br/&gt;case 'x':&lt;br/&gt;case 'y':&lt;br/&gt;case 'z':&lt;br/&gt;while(letter()||digit())&lt;br/&gt;{&lt;br/&gt;concatenation();&lt;br/&gt;get_Char();&lt;br/&gt;}&lt;br/&gt;forToken=0;&lt;br/&gt;k=reserve();&lt;br/&gt;if(k==0)&lt;br/&gt;{&lt;br/&gt;buildList();&lt;br/&gt;return "(10,ID)";&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;buildList();&lt;br/&gt;stringstream ss;&lt;br/&gt;string first;&lt;br/&gt;string second;&lt;br/&gt;ss&amp;lt;&amp;lt;k;&lt;br/&gt;first=ss.str();//以上为将int型转化为string型&lt;br/&gt;map&amp;lt;int,string&amp;gt;::iterator iter;&lt;br/&gt;for(iter=store.begin(); iter!=store.end(); iter++)&lt;br/&gt;{&lt;br/&gt;if(iter-&amp;gt;first==k)&lt;br/&gt;second=iter-&amp;gt;second;&lt;br/&gt;}&lt;br/&gt;return "("+first+","+second+")";&lt;br/&gt;}&lt;br/&gt;break;&lt;br/&gt;case '0':&lt;br/&gt;case '1':&lt;br/&gt;case '2':&lt;br/&gt;case '3':&lt;br/&gt;case '4':&lt;br/&gt;case '5':&lt;br/&gt;case '6':&lt;br/&gt;case '7':&lt;br/&gt;case '8':&lt;br/&gt;case '9':&lt;br/&gt;while(digit())&lt;br/&gt;{&lt;br/&gt;concatenation();&lt;br/&gt;get_Char();&lt;br/&gt;}&lt;br/&gt;retract();&lt;br/&gt;//budlist();对其登记&lt;br/&gt;num=getStr();&lt;br/&gt;return "("+num+",NUM)";&lt;br/&gt;break;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;case'+':&lt;br/&gt;return "(22,+)";&lt;br/&gt;break;&lt;br/&gt;case'-':&lt;br/&gt;return "(23,-)";&lt;br/&gt;break;&lt;br/&gt;case'*':&lt;br/&gt;return "(24,*)";&lt;br/&gt;break;&lt;br/&gt;case'/':&lt;br/&gt;return "(25,/)";&lt;br/&gt;break;&lt;br/&gt;case'(':&lt;br/&gt;return "(26,()";&lt;br/&gt;break;&lt;br/&gt;case')':&lt;br/&gt;return "(27,))";&lt;br/&gt;break;&lt;br/&gt;case'[':&lt;br/&gt;return "(28,[)";&lt;br/&gt;break;&lt;br/&gt;case']':&lt;br/&gt;return "(29,])";&lt;br/&gt;break;&lt;br/&gt;case'{':&lt;br/&gt;return "(30,{)";&lt;br/&gt;break;&lt;br/&gt;case'}':&lt;br/&gt;return "(31,})";&lt;br/&gt;break;&lt;br/&gt;case'"':&lt;br/&gt;return "(41,\")";&lt;br/&gt;break;&lt;br/&gt;case',':&lt;br/&gt;return "(32,,)";&lt;br/&gt;break;&lt;br/&gt;case':':&lt;br/&gt;return "(33,:)";&lt;br/&gt;break;&lt;br/&gt;case';':&lt;br/&gt;return "(34,;)";&lt;br/&gt;break;&lt;br/&gt;case'&amp;lt;':&lt;br/&gt;get_Char();&lt;br/&gt;if(character=='=')&lt;br/&gt;{&lt;br/&gt;return "(38,&amp;lt;=)";&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;retract();&lt;br/&gt;return "(36,&amp;lt;)";&lt;br/&gt;}&lt;br/&gt;break;&lt;br/&gt;case'&amp;gt;':&lt;br/&gt;get_Char();&lt;br/&gt;if(character=='=')&lt;br/&gt;{&lt;br/&gt;return "(37,&amp;gt;=)";&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;retract();&lt;br/&gt;return "(35,&amp;gt;)";&lt;br/&gt;}&lt;br/&gt;break;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;case'=':&lt;br/&gt;get_Char();&lt;br/&gt;if(character=='=')&lt;br/&gt;{&lt;br/&gt;return "(39,==)";&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;retract();&lt;br/&gt;return "(21,=)";&lt;br/&gt;}&lt;br/&gt;break;&lt;br/&gt;case'!':&lt;br/&gt;get_Char();&lt;br/&gt;if(character=='=')&lt;br/&gt;{&lt;br/&gt;return "(40,!=)";&lt;br/&gt;}&lt;br/&gt;else&lt;br/&gt;{&lt;br/&gt;retract();&lt;br/&gt;}&lt;br/&gt;break;&lt;br/&gt;case '\0':&lt;br/&gt;return "1000";&lt;br/&gt;break;&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;default:&lt;br/&gt;error();&lt;br/&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;}&lt;/p&gt;
&lt;p style="margin-top: 10px; margin-right: auto; margin-left: auto; font-family: verdana, Arial, Helvetica, sans-serif; font-size: 14px; line-height: 21px; white-space: normal;"&gt;int main()&lt;br/&gt;{&lt;br/&gt;string temp="int main(){int c=33;if(c=33){printf();}}";&lt;br/&gt;Content b=(temp);&lt;br/&gt;b.stringToChar();&lt;br/&gt;//c.display();&lt;br/&gt;while(b.getC()&amp;lt;b.getLength()){&lt;br/&gt;string s=b.analysis();&lt;br/&gt;if(s!="")&lt;br/&gt;cout&amp;lt;&amp;lt;s&amp;lt;&amp;lt;endl;&lt;br/&gt;}&lt;br/&gt;return 0;&lt;br/&gt;}&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 08:39</pubDate></item><item><title>android studio 2.1版本 -  JewelKing的个人空间 - 开源中国社区</title><link>http://my.oschina.net/u/260921/blog/669384</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;http://pan.baidu.com/s/1o7SJbFs&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 08:08</pubDate></item><item><title>C语言面向对象编程（六）：配置文件解析 -  米兰的小铁匠 - 开源中国社区</title><link>http://my.oschina.net/chaenomeles/blog/669382</link><description>&lt;div class="BlogContent"&gt;&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;在实际项目中，经常会把软件的某些选项写入配置文件。 Windows 平台上的 INI 文件格式简单易用，本篇文章利用《&lt;a href="http://blog.csdn.net/foruok/article/details/18594177" name="18594177" rel="nofollow" target="_blank"&gt;C语言面向对象编程（五）：单链表实现&lt;/a&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;》中实现的单链表，设计了一个“类” ini_parser 来读写 INI 格式的配置文件。&lt;/span&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;    struct ini_parser 可以解析 INI 格式的字符串、文件，也可以将内存中的符合 INI 格式的数据写入文件，能够支持 Windows 、 Linux 、 &lt;a href="http://lib.csdn.net/base/15" rel="nofollow" target="_blank"&gt;Android&lt;/a&gt; 等多平台。目前暂不支持选项分组功能。&lt;/span&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;    功能相对简单，直接看源码吧。&lt;/span&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;    下面是头文件：&lt;/span&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[cpp]&lt;/strong&gt; &lt;a href="http://blog.csdn.net/foruok/article/details/23383439#" rel="nofollow"&gt;view plain&lt;/a&gt;&lt;span&gt; &lt;a href="http://blog.csdn.net/foruok/article/details/23383439#" rel="nofollow"&gt;copy&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; single_list;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser {  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; single_list * keyvalues;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; (*parse_file)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * file);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; (*parse_string)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *text);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * (*value)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * key);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; (*set_value)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * key, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * value);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; (*remove)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *key);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; (*save_to_file)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * file);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; (*deletor)(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *ini);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;};  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * new_ini_parser();  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; background-color: rgb(255, 255, 255);"&gt;    struct init_parser 的声明符合我们在本系列文章中提到的面向对象框架，需要说明的是，一旦 deletor 方法被调用， ini_parser 的实例将不再允许访问。&lt;/span&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;    下面是源文件：&lt;/span&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[cpp]&lt;/strong&gt; &lt;a href="http://blog.csdn.net/foruok/article/details/23383439#" rel="nofollow"&gt;view plain&lt;/a&gt;&lt;span&gt; &lt;a href="http://blog.csdn.net/foruok/article/details/23383439#" rel="nofollow"&gt;copy&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: gray; background-color: inherit;"&gt;#include "ini_parser.h"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: gray; background-color: inherit;"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: gray; background-color: inherit;"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair{  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; slist_node node;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * szTag;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * szValue;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;};  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;typedef&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair tag_value;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _tag_value_free(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; slist_node *node)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(node) delete_tag_value_pair(node);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _tag_value_hittest(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; slist_node * node, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *key)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; strcmp((&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;*)tag, ((&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair*)node)-&amp;gt;szTag);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; single_list * new_tag_value_list()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; new_single_list(_tag_value_free, _tag_value_hittest);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair *new_tag_value_pair()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = (&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair *)malloc(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;sizeof&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;node.next = 0;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;szTag = 0;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;szValue = 0;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; pair;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * make_tag_value_pair(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * tag, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * value)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair *pair = 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(!tag || !value)&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair = (&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair*)malloc(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;sizeof&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;szTag = strdup(tag);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;szValue = strdup(value);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;node.next = 0;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; pair;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * parse_line(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *line, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; len)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; count = 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * p = line;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * end = 0;m  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * start = line;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(!p) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*p == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;' '&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) ++p;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/*blank line*/&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(p - line == len ||  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            *p == &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\r'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ||  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            *p == &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\n'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ||  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            *p == &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\0'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/*do not support group*/&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*p == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'['&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/*comments*/&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*p == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'#'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* extract key */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    start = p;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    end = line + len;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*p != &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'='&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &amp;amp;&amp;amp; p!= end) ++p;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(p == end)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* none '=' , invalid line */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    end = p - 1;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*end == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;' '&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) --end; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* skip blank at the end */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    count = end - start + 1;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair = new_tag_value_pair();  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;szTag = malloc(count + 1);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    strncpy(pair-&amp;gt;szTag, start, count);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    pair-&amp;gt;szTag[count] = 0;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* extract value */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ++p;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    end = line + len; &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* next pos of the last char */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;( *p == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;' '&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &amp;amp;&amp;amp; p != end) ++p;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(p == end)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        delete_tag_value_pair(pair);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    start = p;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    --end; &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* to the last char */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*end == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\n'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) { *end = 0; --end; }  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*end == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\r'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) { *end = 0; --end; }  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    count = end - start + 1;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(count &amp;gt; 0)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        pair-&amp;gt;szValue = malloc(count + 1);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        strncpy(pair-&amp;gt;szValue, start, count);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        pair-&amp;gt;szValue[count] = 0;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 130, 0); background-color: inherit;"&gt;/* release empty key-value pair */&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(!pair-&amp;gt;szValue)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        delete_tag_value_pair(pair);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; pair;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _parse_file(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *file){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;FILE&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * fp = fopen(file, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"r"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(fp)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; buf[1024] = {0};  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(fgets(buf, 1024, fp))  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            pair = parse_line(buf, strlen(buf));  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;                ini-&amp;gt;keyvalues-&amp;gt;add(ini-&amp;gt;keyvalues, pair);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        fclose(fp);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini-&amp;gt;keyvalues-&amp;gt;size;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; -1;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _parse_text(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * text){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *p = text;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * start = 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(!text) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; -1;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(1)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        start = p;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*p != &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\n'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &amp;amp;&amp;amp; *p != &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\0'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; )++p;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(*p == &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\0'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;break&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        pair = parse_line(start, p - start);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair) ini-&amp;gt;keyvalues-&amp;gt;add(ini-&amp;gt;keyvalues, pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        ++p;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini-&amp;gt;keyvalues-&amp;gt;size;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * _value(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * key){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = NODE_T(ini-&amp;gt;keyvalues-&amp;gt;find_by_key(ini-&amp;gt;keyvalues, key), &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair) &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; pair-&amp;gt;szValue;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _set_value(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * key, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *value){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = NODE_T(ini-&amp;gt;keyvalues-&amp;gt;find_by_key(ini-&amp;gt;keyvalues, key), &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair-&amp;gt;szValue) free(pair-&amp;gt;szValue);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        pair-&amp;gt;szValue = strdup(value);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;else&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        ini-&amp;gt;keyvalues-&amp;gt;add(ini-&amp;gt;keyvalues, make_tag_value_pair(key, value));  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _remove(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * key){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = NODE_T(ini-&amp;gt;keyvalues-&amp;gt;find_by_key(ini-&amp;gt;keyvalues, key), &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair)ini-&amp;gt;keyvalues-&amp;gt;remove(ini-&amp;gt;keyvalues, pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; write_keyvalue(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;FILE&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; *fp)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    fputs(pair-&amp;gt;szTag, fp);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    fputc(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'='&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, fp);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    fputs(pair-&amp;gt;szValue, fp);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    fputc(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;'\n'&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, fp);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _save_to_file(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;const&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * file){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(ini-&amp;gt;keyvalues-&amp;gt;size &amp;gt; 0)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;FILE&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * fp = fopen(file, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"w"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(fp)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair * pair = NODE_T(ini-&amp;gt;keyvalues-&amp;gt;head,&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;while&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(pair != 0)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;                write_keyvalue(pair, fp);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;                pair = NODE_T(pair-&amp;gt;node.next, &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; tag_value_pair);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            fclose(fp);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;            &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; 0;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; -1;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; _delete_ini_parser(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser *ini){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;if&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(ini)  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    {  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        ini-&amp;gt;keyvalues-&amp;gt;deletor(ini-&amp;gt;keyvalues);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;        free(ini);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    }  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * new_ini_parser(){  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini = (&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser*)malloc(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;sizeof&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;(&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;keyvalues = new_tag_value_list();  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;parse_file = _parse_file;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;parse_string = _parse_text;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;value = _value;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;set_value = _set_value;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;remove = _remove;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;save_to_file = _save_to_file;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;deletor = _delete_ini_parser;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;return&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; background-color: rgb(255, 255, 255);"&gt;    下面是简单的测试代码：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[cpp]&lt;/strong&gt; &lt;a href="http://blog.csdn.net/foruok/article/details/23383439#" rel="nofollow"&gt;view plain&lt;/a&gt;&lt;span&gt; &lt;a href="http://blog.csdn.net/foruok/article/details/23383439#" rel="nofollow"&gt;copy&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;char&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; * g_szIniString = &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"#abc\nfirst=2\nsecond\nname=charli  zhang \n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;;  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser_test_string()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini = new_ini_parser();  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; size = ini-&amp;gt;parse_string(ini, g_szIniString);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( size &amp;gt; 0);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"second"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) == 0 );  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"abc"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) == 0);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"name"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) != NULL );  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"first"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) != NULL);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"ini string: %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, g_szIniString);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key-value pairs count = %d\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, size);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key \'name\'', value = %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, ini-&amp;gt;value(ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"name"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key \'first\'', value = %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, ini-&amp;gt;value(ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"first"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;set_value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"baidu"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"hahaha"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;save_to_file(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"write.conf"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;remove(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"first"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;save_to_file(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"write2.conf"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;deletor(ini);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;static&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser_test_file()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;struct&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser * ini = new_ini_parser();  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    &lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(46, 139, 87); font-weight: bold; background-color: inherit;"&gt;int&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; size = ini-&amp;gt;parse_file(ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"test.conf"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( size &amp;gt; 0);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"second"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) == 0 );  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"abc"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) == 0);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"name"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) != NULL );  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    assert( ini-&amp;gt;value(ini, &lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"first"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;) != NULL);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"ini string: %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, g_szIniString);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key-value pairs count = %d\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, size);  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key \'name\'', value = %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, ini-&amp;gt;value(ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"name"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key \'first\'', value = %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, ini-&amp;gt;value(ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"first"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    printf(&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"key \'baidu\'', value = %s\n"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;, ini-&amp;gt;value(ini, &lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: blue; background-color: inherit;"&gt;"baidu"&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt;));  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini-&amp;gt;deletor(ini);  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: rgb(0, 102, 153); font-weight: bold; background-color: inherit;"&gt;void&lt;/span&gt;&lt;span style="margin: 0px; padding: 0px; border: none; background-color: inherit;"&gt; ini_parser_test()  &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;{  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini_parser_test_string();  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;    ini_parser_test_file();  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span style="margin: 0px; padding: 0px; border: none; color: black; background-color: inherit;"&gt;}  &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p style="color: rgb(54, 46, 43); font-family: Arial; font-size: 14px; line-height: 26px; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="color: rgb(51, 51, 51); line-height: 24px;"&gt;    struct ini_parser 已经运用在实际的项目中，目前为止没发现什么问题。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 07:41</pubDate></item><item><title>请教个应用第一次启动，点击应用图标后卡的问题。 未解决 -  aslan_jia的个人空间 - 开源中国社区</title><link>http://my.oschina.net/aslanjia/blog/669376</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;&lt;span style="color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, STheiti, 微软雅黑, 黑体, Arial, Tahoma, sans-serif, serif; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);"&gt;请教个应用第一次启动，点击应用图标后卡的问题。&lt;/span&gt;&lt;br/&gt;&lt;span style="color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, STheiti, 微软雅黑, 黑体, Arial, Tahoma, sans-serif, serif; font-size: 14px; line-height: 24px; background-color: rgb(255, 255, 255);"&gt;应用中会使用到了一个117k的mp3文件。 第一次启动app的时候，点击完图标后，明显会卡住三四秒。但是如果程序中去掉这个mp3文件。第一次启动就会很快。 这个情况要怎么处理下啊&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 07:10</pubDate></item><item><title>关系数据库常用SQL语句语法大全 -  SeayXu的个人空间 - 开源中国社区</title><link>http://my.oschina.net/SeayXu/blog/669370</link><description>&lt;div class="BlogContent"&gt;&lt;/div&gt;</description><pubDate>2016-05-04 02:35</pubDate></item><item><title>分布式大数据多维分析（OLAP）引擎：Apache Kylin 在百度地图的实践 -  leejun2005的个人页面 - 开源中国社区</title><link>http://my.oschina.net/leejun2005/blog/669369</link><description>&lt;div class="BlogContent"&gt;&lt;span id="OSC_h1_1"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;1. 前言&lt;/span&gt;&lt;/h1&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;百度地图开放平台业务部数据智能组&lt;/span&gt;主要负责百度地图内部相关业务的大数据计算分析，处理日常百亿级规模数据，为不同业务提供单条SQL毫秒级响应的OLAP多维分析查询服务。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;对于Apache Kylin在实际生产环境中的应用，在国内，百度地图数据智能组是最早的一批实践者之一。Apache Kylin在2014年11月开源，当时，我们团队正需要搭建一套完整的大数据OLAP分析计算平台，用来提供百亿行级数据单条SQL毫秒到秒级的多维分析查询服务，在技术选型过程中，我们参考了Apache Drill、Presto、Impala、Spark SQL、Apache Kylin等。对于Apache Drill和Presto因生产环境案例较少，考虑到后期遇到问题难以交互讨论，且Apache Drill整体发展不够成熟。对于Impala和Spark SQL，主要基于内存计算，对机器资源要求较高，单条SQL能够满足秒级动态查询响应，但交互页面通常含有多条SQL查询请求，在超大规模数据规模下，动态计算亦难以满足要求。后来，我们关注到了基于MapReduce预计算生成Cube并提供低延迟查询的Apache Kylin解决方案，并于2015年2月左右在生产环境完成了Apache Kylin的首次完整部署。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;Apache Kylin是一个开源的分布式分析引擎，提供Hadoop之上的SQL查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由eBay Inc. 开发并贡献至开源社区，并于2015年11月正式毕业成为Apache顶级项目。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h1_2"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;2. 大数据多维分析的挑战&lt;/span&gt;&lt;/h1&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;我们在Apache Kylin集群上跑了多个Cube测试，结果表明它能够有效解决大数据计算分析的3大痛点问题。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;痛点一&lt;/span&gt;：百亿级海量数据多维指标动态计算耗时问题，Apache Kylin通过预计算生成Cube结果数据集并存储到HBase的方式解决。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;痛点二&lt;/span&gt;：复杂条件筛选问题，用户查询时，Apache Kylin利用router查找算法及优化的HBase Coprocessor解决；&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;痛点三&lt;/span&gt;：跨月、季度、年等大时间区间查询问题，对于预计算结果的存储，Apache Kylin利用Cube的Data Segment分区存储管理解决。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;这3个痛点的解决，使我们能够在百亿级大数据规模下，且数据模型确定的具体多维分析产品中，达到单条SQL毫秒级响应。因此，我们对Apache Kylin产生了较高的兴趣，大数据计算查询分析的应用中，一个页面通常需要多条SQL查询，假设单条SQL查询需要2秒响应，页面共有5个SQL请求，总共就需要10秒左右，这是不可接受的。而此时，Apache Kylin对于一个页面多条SQL查询响应的优势就尤为突出。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;在实践过程中，根据公司不同业务的需求，我们数据智能团队的大数据OLAP平台后台存储与查询引擎采用了由Apache Kylin、Impala及Spark SQL组成，在中小数据规模且分析维度指标较为随机的情况下，平台可提供Impala或Spark SQL服务；在超大规模百亿级行数据的具体产品案例上，因查询性能需求较高，同时具体产品对其需要分析的维度和指标较为明确，我们使用Apache Kylin解决方案。下文将主要介绍Apache Kylin在百度地图内部的实践使用。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h1_3"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;3. 大数据OLAP平台系统架构&lt;/span&gt;&lt;/h1&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105000.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022634_FcEQ.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;span id="OSC_h2_4"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;3.1 主要模块&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;数据接入&lt;/span&gt;：主要负责从数据仓库端获取业务所需的最细粒度的事实表数据。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;任务管理&lt;/span&gt;：主要负责Cube的相关任务的执行、管理等。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;任务监控&lt;/span&gt;：主要负责Cube任务在执行过程中的状态及相应的操作管理。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;集群监控&lt;/span&gt;：主要包括Hadoop生态进程的监控及Kylin进程的监控。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_5"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;3.2 集群环境&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;因业务特殊性，我们并未采用公司内部的Hadoop集群进行计算、存储和查询，而是独立部署一台完整的集群，并独立维护。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;集群机器&lt;/span&gt;：共4台，1台master(100G内存) + 3台slaves(30G内存)。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;软件环境&lt;/span&gt;：CDH + Hive + HBase + Kylin 0.71&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h1_6"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;4. 基于Apache Kylin的二次开发&lt;/span&gt;&lt;/h1&gt;
&lt;span id="OSC_h2_7"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;4.1 数据接入模块二次开发&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;对于任何一个数据计算处理平台，数据的接入十分关键，就像熟知的Spark，对数据接入也是十分重视。目前，我们的大数据OLAP平台可以支持2种数据源的引入： MySQL数据源及HDFS数据源。在实践中，我们遇到一个问题，假设MySQL及HDFS数据源没有标识表示T-1天的数据已经计算完成的情况下，如何确定T-1天的数据已经准备就绪。对于Hive数据源，查询数据所在Hive Meta的partition是否就绪；对于MySQL，我们目前想到的办法是间隔一定时间循环探测当天数据行数是否变化，如果没有变化，我们基本能够简单认为第T-1天的数据已经由数据仓库计算完毕，接下来就可以触发数据拉取模块逻辑将数据拉取到Master节点的本地文件系统中，根据业务判断是否需要对这些数据细加工，然后，导入到Master的Hive中，触发事实表对应任务涉及到的所有cube，启动MapReduce计算，计算结束后，前端可以刷新访问最新数据。另外，如果到了指定时间，发现数据仓库端的数据仍旧没有准备好，数据接入模块会短信报警给仓库端，并继续循环检测直至指定时刻退出。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105001.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022636_qfKp.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;数据引入模块&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_8"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;4.2 任务管理模块二次开发&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;任务管理对于计算型平台服务十分重要，也是我们大数据OLAP多维分析平台的核心扩展工作之一。对于用户而言，Apache Kylin对于Cube的最小存储单位为data segment，类似于Hive的partition，data segment采用左闭右开区间表示，如[2015-11-01，2015-11-02)表示含有2015-11-01这一天的数据。对于Cube数据的管理主要基于data segment粒度，大致分为3种操作: 计算(build)、更新(refresh)、合并(merge)。对于一个具体产品来说，它的数据是需要每天例行计算到cube中，正常例行下，每天会生成1个data segment，但可能会因为数据仓库的任务延迟，2天或多天生成1个segment。随着时间推移，一方面，大量的data segment严重影响了性能，另一方面，这也给管理带来了困难和麻烦。因此，对于1个cube，我们按照1个自然月为1个data segment，清晰且易管理。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;假设我们有1个月30天的数据，共23个data segment数据片段，如：[2015-11-01，2015-11-02)， [2015-11-02，2015-11-04)， [2015-11-04，2015-11-11)， [2015-11-11，2015-11-12)， [2015-11-12，2015-11-13)， 。。。[2015-11-30，2015-12-01)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;问题1&lt;/span&gt;: 假设因为数据有问题，需要回溯2015-11-01的数据，因为我们能够在cube中找到[2015-11-01，2015-11-02)这样一个data segment，满足这个时间区间，于是，我们可以直接界面操作或者Rest API启动这个data segment的refresh更新操作。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;问题2&lt;/span&gt;: 假设我们需要回溯2015-11-02到2015-11-03的数据，同理，可以找到一个符合条件的data segment [2015-11-02，2015-11-04)，然后refresh更新这个data segment。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;问题3&lt;/span&gt;: 假设我们需要回溯2015-11-01到2015-11-02的数据，我们找不到直接满足时间区间的data segment。于是我们有2种解决方案，第1种方案是分别依次refresh更新 [2015-11-01，2015-11-02)， [2015-11-02，2015-11-04)这2个data segment实现；第2种方案是先合并(merge)[2015-11-01，2015-11-02)， (2015-11-02，2015-11-04)这两个data segment，合并后得到[2015-11-01，2015-11-04)这样1个data segment，然后我们再拉取新数据后执行更新操作，即可满足需求。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;问题4&lt;/span&gt;: 假设我们需要刷新2015-11-01~2015-11-30这1个月的数据，我们在另1套集群上基于Kylin 1.1.1对同一个cube进行测试，如果采用问题3中的第1种方案，我们需要逐步刷新cube的23个data segment，大约耗时17.93min X 30=537分钟； 如果我们采用问题3中的第2种方案， 那么我们只需要将23个data segment合并成[2015-11-01，2015-12-01)这1个data segment，计1次操作。然后再执行1次更新操作，共2次操作即可完成需求，总体上，耗时约83.78分钟，较第1种方法性能上提高很多。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;基于上面的问题，目前我们平台对Apache Kylin进行了二次开发，扩展出了任务管理模块。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;对于cube的计算(build)操作&lt;/span&gt;，假设数据仓库2015-11-29～2015-12-02的数据因故延迟，在2015年12-03天产出了(T-1天的数据)，如果不判断处理，就会例行计算生成一个时间区间为[2015-11-29，2015-12-03)的data segment。所以，在每个cube计算前，我们的逻辑会自动检测跨自然月问题，并生成[2015-11-29，2015-12-01)和[2015-12-01，2015-12-03)两个data segment.&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;对于cube的更新(refresh)操作&lt;/span&gt;，我们会采用问题3、问题4中提到的第2种方案，自动合并(merge)data segment后再执行更新refresh操作。因为上面已经保证了不会有跨月data segment的生成，这里的自动合并也不会遇到生成跨自然月的情况。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;对于cube的合并(merge)操作&lt;/span&gt;，如果每天都自动合并该自然月内前面日期已有的所有data segment，假设我们想回溯更新2015-11-11这一天的数据，那么就需要回溯(2015-11-01，2015-11-12)（因为这个时间区间的data segment每天都被自动合并了），其实，我们没有必要回溯2015-11-01~2015-11-10这10天的数据。所以，对于1个自然月内的cube的数据，在当月，我们先保留了1天1个data segment的碎片状态，因为在当月发现前面某几天数据有问题的概率大，回溯某个data segment小碎片就更加合理及性能更优。对于上个月整个月的数据，在下个月的中上旬时数据已经比较稳定，回溯的概率较小，通常要回溯也是上个月整月的数据。因此，在中上旬整体合并上1个月的数据而不是每天合并更合理。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105002.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022638_qRxw.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;任务管理模块&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_9"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;4.3 平台监控模块二次开发&lt;/span&gt;&lt;/h2&gt;
&lt;span id="OSC_h3_10"&gt;&lt;/span&gt;
&lt;h3&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(146, 208, 80);"&gt;4.3.1 任务监控&lt;/span&gt;&lt;/h3&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;通常，1个产品对应多个页面，1页面对应1个事实表，1个事实表对应多个cube，那么一个产品通常会包含多个cube，上面提到的cube基于data segment的3种任务状态，很难人为去核查，所以对于任务执行的监控是非常必要的，当任务提交后，每隔一段时间检测一次任务的状态，任务状态中间失败或者最后成功后，则会发送邮件或者短信报警通知用户。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h3_11"&gt;&lt;/span&gt;
&lt;h3&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(146, 208, 80);"&gt;4.3.2 集群监控&lt;/span&gt;&lt;/h3&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;由于我们的服务器是团队内部独自部署维护，为了高效监控整套Hadoop集群、Hive，HBase、Kylin的进程状态，以及处理海量临时文件的问题，我们单独开发了监控逻辑模块。一旦集群出现问题，能够第一时间收到报警短信或者邮件。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105003.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022640_wDGY.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;平台监控模块&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_12"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;4.4 资源隔离二次开发&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;由于我们以平台方式提供给各个业务线使用，当某个业务线的业务数据计算规模较大，会造成平台现有资源紧张时，我们会根据实际情况，要求业务方提供机器资源，随之而来的就是如何根据业务方提供的机器资源分配对应的计算队列的资源隔离问题。目前，官方的Apache Kylin版本对于整个集群只能使用1个kylin_job_conf.xml, 平台上所有项目的所有Cube的3种操作只能使用同一个队列。于是，我们基于kylin-1.1.1-incubating这个tag的源码做了相关修改，支持了以项目为粒度的资源隔离功能，并提交issue到&lt;/span&gt;&lt;a href="https://issues.apache.org/jira/browse/KYLIN-1241" rel="nofollow"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;https://issues.apache.org/jira/browse/KYLIN-1241&lt;/span&gt;&lt;/a&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;，方案对于我们平台管理员自身也参与项目开发的应用场景下非常适用。对于某个项目，如果不需要指定特定计算队列，无需在$KYLIN_HOME下指定该项目的kylin_job_conf.xml文件，系统会自动调用官方原有的逻辑，使用默认的Hadoop队列计算。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105004.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022642_k6bG.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;资源隔离&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_13"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;4.5 Hadoop及HBase优化&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;因独立部署的Hadoop集群硬件配置不高，内存十分有限，所以，在项目实践过程中也遇到不少问题。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h3_14"&gt;&lt;/span&gt;
&lt;h3&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(146, 208, 80);"&gt;4.5.1 Hadoop任务内存资源不够，cube计算失败&lt;/span&gt;&lt;/h3&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;调整MapReduce分配资源参数：在cube计算过程中，会出现mr任务失败，根据日志排查，主要因mr的内存分配不足导致，于是，我们根据任务实际情况整体调整了yarn.nodemanager.resource.memory-mb,mapreduce.map.memory.mb, mapreduce.map.java.opts, mapreduce.reduce.memory.mb及mapreduce.reduce.java.opts等参数。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h3_15"&gt;&lt;/span&gt;
&lt;h3&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(146, 208, 80);"&gt;4.5.2 HBase RegionServer在不同节点随机down掉&lt;/span&gt;&lt;/h3&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;由于机器整体资源限制，我们给HBase配置的HBASE_HEAPSIZE值较小，随着时间推移，平台承载的项目越来越多，对内存及计算资源要求也逐步提高。后来平台在运行过程中，HBase的RegionServer在不同节点上出现随机down掉的现象，导致HBase不可用，影响了Kylin的查询服务，这个问题困扰了团队较长时间，通过网上资料及自身的一些经验，我们对HBase和Hadoop相关参数做了较多优化。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;A. HBase的JVM GC相关参数调优，开启了HBase的mslab参数：可以通过GC调优获得更好的GC性能，减少单次GC的时间和FULL GC频率；&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;B. HBase的ZK连接超时相关参数调优：默认的ZK超时设置太短，一旦发生FULL GC，极其容易导致ZK连接超时；&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;C. ZK Server调优，提高maxSessionTimeout：ZK客户端（比如Hbase的客户端）的ZK超时参数必须在服务端超时参数的范围内，否则ZK客户端设置的超时参数起不到效果；&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;D. HBASE_OPTS参数调优：开启CMS垃圾回收期，增大了PermSize和MaxPermSize的值；&lt;br/&gt;Hadoop及HBase优化&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105005.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022643_srXQ.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;Hadoop及HBase优化&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h1_16"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;5. Apache Kylin项目实践&lt;/span&gt;&lt;/h1&gt;
&lt;span id="OSC_h2_17"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;5.1 基于仓库端join好的fact事实表建Cube，减少对小规模集群带来的hive join压力&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;对于Cube的设计，官方有专门的相关文档说明，里面有较多的指导经验，比如: cube的维度最好不要超过15个， 对于cardinality较大的维度放在前面，维度的值不要过大，维度Hierarchy的设置等等。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;实践中，我们会将某个产品需求分为多个页面进行开发，每个页面查询主要基于事实表建的cube，每个页面对应多张维度表和1张事实表，维度表放在MySQL端，由数据仓库端统一管理，事实表计算后存放在HDFS中，事实表中不存储维度的名称，仅存储维度的id，主要基于3方面考虑，第一：减少事实表体积；第二：由于我们的Hadoop集群是自己单独部署的小集群，MapReduce计算能力有限，join操作希望在仓库端完成，避免给Kylin集群带来的Hive join等计算压力；第三：减少回溯代价。 假设我们把维度名称也存在Cube中，如果维度名称变化必然导致整个cube的回溯，代价很大。这里可能有人会问，事实表中只有维度id没有维度name，假设我们需要join得到查询结果中含有维度name的记录，怎么办呢？对于某个产品的1个页面，我们查询时传到后台的是维度id，维度id对应的维度name来自MySQL中的维度表，可以将维度name查询出来并和维度id保存为1个维度map待后续使用。同时，一个页面的可视范围有限，查询结果虽然总量很多，但是每一页返回的满足条件的事实表记录结果有限，那么，我们可以通过之前保存的维度map来映射每列id对应的名称，相当于在前端逻辑中完成了传统的id和name的join操作。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_18"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;5.2 Aggregation cube辅助中高维度指标计算，解决向上汇总计算数据膨胀问题&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;比如我们的事实表有个detail分区数据，detail分区包含最细粒度os和appversion两个维度的数据(注意: cuid维度的计算在仓库端处理)，我们的cube设计也选择os和appversion，hierarchy层次结构上，os是appversion的父亲节点，从os+appversion(group by os, appversion)组合维度来看，统计的用户量没有问题，但是按照os(group by os)单维度统计用户量时，会从基于这个detail分区建立的cube向上汇总计算，设上午用户使用的是android 8.0版本，下午大量用户升级到android 8.1版本，android 8.0组合维度 + android 8.1组合维度向上计算汇总得到os=android(group by os, where os=android)单维度用户，数据会膨胀且数据不准确。因此我们为事实表增加一个agg分区，agg分区包含已经从cuid粒度group by去重后计算好的os单维度结果。这样，当用户请求os维度汇总的情况下，Apache Kylin会根据router算法，计算出符合条件的候选cube集合，并按照权重进行优选级排序(熟悉MicroStrategy等BI产品的同学应该知道这类案例)，选择器会选中基于agg分区建立的os单维度agg cube，而不从detail这个分区建立的cube来自底向上从最细粒度往高汇总，从而保证了数据的正确性。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h2_19"&gt;&lt;/span&gt;
&lt;h2&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(0, 176, 240);"&gt;5.3 新增留存类分析，如何更高效更新历史记录？&lt;/span&gt;&lt;/h2&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;对应小规模集群，计算资源是非常宝贵的，假设我们对于某个项目的留存分析到了日对1日到日对30日，日对1周到日对4周，日对1月到日对4月，周对1周到周对4周，月对1月到月对4月。那么对于传统的存储方案，我们将遇到问题。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h3_20"&gt;&lt;/span&gt;
&lt;h3&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(146, 208, 80);"&gt;5.3.1 传统方案&lt;/span&gt;&lt;/h3&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;假如&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;今天是2015-12-02&lt;/span&gt;，我们计算&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;实际得到的是2015-12-01的数据&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105006.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022645_GRpa.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;上面数据存储方案的思路是，当今天是2015-12-02，那么2015-12-01可以计算活跃用户了，于是，我们会将2015-11-30的日对第1日留存， 2015-11-29的日对第2日， 2015-11-28的日对第3日等的这些列指标数据进行更新(&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;如上红色对角线部分&lt;/span&gt;)，这是因为每天数据的每1列都是以当天为基准，等今后第n天到了，再&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;回填&lt;/span&gt;这1天的这些第x日留存，如此，对于1个任务会级联更新之前的多天历史数据，如上&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;红色对角线&lt;/span&gt;的数据。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;此方案的优势：&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;a, 如果要查看某个时间范围内的某一个或者多个指标，可以直接根据时间区间，选择需要的列指标即可。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;b, 如果要查看某1天的多个指标，也可以直接选择那1天的多个指标即可&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;此方案的缺点：&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;a, 每天都需要更新历史数据，如上红色对角线的数据，造成大量MapReduce任务预计算cube，需要较多的机器计算资源支持。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;b, 如果今后增加新的留存，比如半年留存，年留存，那么对角线长度就更长，每天就需要回溯更新更多天数的历史数据，需要更多时间跑任务。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;c, 对于级联更新的大量的历史数据任务，其实依赖性很强，如何保证留存项目多个cube每一天的多个data segment级联更新正确，非常复杂，难以维护和监控，对于数据仓库端也易遇到如此问题。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;d, 对于需要批量回溯一个较大时间区间的历史数据时，问题3中涉及的任务计算难点和困难尤为突出。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h3_21"&gt;&lt;/span&gt;
&lt;h3&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(146, 208, 80);"&gt;5.3.2 变通方案&lt;/span&gt;&lt;/h3&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;假如今天是2015-12-02，我们计算实际得到的是2015-12-01的数据（可和上面的结构对比）&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;(点击放大图像)&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;a href="http://cdn4.infoqstatic.com/statics_s2_20160414-0116u1/resource/articles/practis-of-apache-kylin-in-baidu-map/zh/resources/0105007.png" rel="nofollow"&gt;&lt;img src="http://static.oschina.net/uploads/img/201605/04022646_w2Fw.png" width="550"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;此方案的思路是，当今天是2015-12-02，&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;实际是2015-12-01的数据&lt;/span&gt;，如上示例存储，&lt;span style="font-size: 16px; font-family: 微软雅黑, 'Microsoft YaHei'; font-weight: 600; margin: 0px; border: 0px; padding: 0px;"&gt;但日对第n日的留存表示的是n日前对应的那个日期的留存量，相当于旋转了红色对角线。&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;此方案的优势：&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;a, 如果要查看某个时间范围内的某1个指标，直接选择该范围的该列指标即可&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;b, 如果今后增加新的留存，比如半年留存，年留存等指标，不需要级联更新历史天数的数据，只需要更新2015-12-01这1天的数据，时间复杂度O(1)不变，对物理机器资源要求不高。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-weight: 600; margin: 0px; border: 0px; padding: 0px; font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;此方案的缺点：&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;a, 如果涉及到某1天或者某个时间范围的多列指标查询，需要前端开发留存分析特殊处理逻辑，根据相应的时间窗口滑动，从不同的行，选择不同的列，然后渲染到前端页面。&lt;/span&gt;&lt;/p&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;目前，我们在项目中采用变通的存储方案。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h1_22"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;6. 总结&lt;/span&gt;&lt;/h1&gt;
&lt;p style="margin-top: 0px; margin-bottom: 15px; padding: 0px; border: 0px; float: none; font-size: 14px; line-height: 25.2px; clear: none; width: 610px; font-family: 'Lantinghei SC', 'Open Sans', Arial, 'Hiragino Sans GB', 'Microsoft YaHei', 微软雅黑, STHeiti, 'WenQuanYi Micro Hei', SimSun, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;目前，我们大数据OLAP多维分析平台承载百度地图内部多个基于Apache Kylin引擎的亿级多维分析查询项目，共计约80个cube，平均半年时间的历史数据，共计约50亿行的源数据规模，单表最大数据量为20亿+条源数据，满足大时间区间、复杂条件过滤、多维汇总聚合的单条SQL查询毫秒级响应，较为高效地解决了亿级大数据交互查询的性能需求，非常感谢由eBay贡献的Apache Kylin，从预计算和索引的思路为大数据OLAP开源领域提供了一种朴素实用的解决方案，也非常感谢Apache Kylin社区提供的支持和帮助。&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px;"&gt;作者简介：&lt;/span&gt;&lt;/strong&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; line-height: 25.2px; font-weight: 600; margin: 0px; border: 0px; padding: 0px; background-color: rgb(255, 255, 255);"&gt;王冬&lt;/span&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; line-height: 25.2px; background-color: rgb(255, 255, 255);"&gt;，百度地图数据智能组成员，北京理工大学计算机本硕毕业，2012加入Microstrategy，负责BI Server核心组件SQL Engine相关开发。并于2014年加入百度地图数据智能组，主要负责大数据OLAP多维分析计算方向研究，热爱大数据离线、实时平台建设应用、Spark生态应用等。&lt;/span&gt;&lt;/p&gt;
&lt;span id="OSC_h1_23"&gt;&lt;/span&gt;
&lt;h1&gt;&lt;span style="font-family: 微软雅黑, 'Microsoft YaHei'; font-size: 16px; background-color: rgb(255, 255, 0);"&gt;Refer：&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;[1] Apache Kylin在百度地图的实践&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.infoq.com/cn/articles/practis-of-apache-kylin-in-baidu-map" rel="nofollow" target="_blank"&gt;http://www.infoq.com/cn/articles/practis-of-apache-kylin-in-baidu-map&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[2] 分布式大数据多维分析（OLAP）引擎Apache Kylin安装配置及使用示例&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lxw1234.com/archives/2016/04/643.htm" rel="nofollow" target="_blank"&gt;http://lxw1234.com/archives/2016/04/643.htm&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[3] 大数据系统的Lambda架构&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.36dsj.com/archives/36384" rel="nofollow" target="_blank"&gt;http://www.36dsj.com/archives/36384&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[4] 用于实时大数据处理的Lambda架构&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/brucesea/article/details/45937875" rel="nofollow" target="_blank"&gt;http://blog.csdn.net/brucesea/article/details/45937875&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[5] Lambda架构与推荐在电商网站实践&lt;/p&gt;
&lt;p&gt;&lt;a href="http://h2ex.com/418" rel="nofollow" target="_blank"&gt;http://h2ex.com/418&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[6] 【PPT+实录】斗鱼TV大数据负责人吴瑞诚：斗鱼实时计算平台的演进&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/1rje09T" rel="nofollow" target="_blank"&gt;http://bit.ly/1rje09T&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;[7] 基于Flume+Kafka+ Elasticsearch+Storm的海量日志实时分析平台&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bit.ly/1W5f2TN" rel="nofollow" target="_blank"&gt;http://bit.ly/1W5f2TN&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 02:26</pubDate></item><item><title>InnoDB内存管理源码剖析 -  jzzlee的个人空间 - 开源中国社区</title><link>http://my.oschina.net/u/347565/blog/669367</link><description>&lt;div class="BlogContent"&gt;&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;的内存管理分为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;层。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、在底层&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;创建一个通用内存池，负责为系统提供小块内存，另外&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;还创建缓冲池，可以为系统提供更大块的内存。两者都是向系统申请内存，只申请一次。其中，通用内存池只由中间层内存堆直接使用。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、在中间层创建一个内存堆对象，内存堆可以调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;mem_area_alloc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;函数从通用内存池申请内存，称为动态申请，也可以一次调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;buf_frame_alloc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;函数从缓冲池快速申请一页（默认&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;16KB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;）内存，称为缓冲池申请。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;实现上，内存堆就像是一个栈，每次申请的内存块由双链表链接，它可以无限增长，但是它在释放时，每次只能释放栈顶的内存块，或者一次性释放整个内存堆的所有内存块。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、最上层为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;的各个模块，当某个模块需要使用动态申请内存时，其向内存堆申请内存。使用模块分层设计的好处在于：（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;）内存池一次从系统申请释放一大块内存，避免频繁调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;malloc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;free&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;，提高性能。（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;）一次申请一块大内存，减少内存外碎片。（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;）允许内存堆从缓冲池快速申请一页内存。（&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;）分层设计实现功能的拆分，便于管理与实现。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;/span&gt;           &lt;img alt="" src="http://static.oschina.net/uploads/space/2016/0504/014222_DlGE_347565.png"/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;font-family:宋体;"&gt;内存管理层次图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;下面说明&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;内存管理是如何工作的，使用内存块指明在内存堆中的由指针链接的一个个内存块，使用内存区指明内存池中由&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;free_list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;列表管理的大小为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2^i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;的多个连续内存区域。首先需要说明几个数据结构：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;类型双向链表&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;#define UT_LIST_NODE_T(TYPE)\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;struct {\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;TYPE *&lt;span&gt;   &lt;/span&gt;prev;&lt;span&gt;       &lt;/span&gt;/* pointer to the previous node,\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                     &lt;/span&gt;NULL if start of list */\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;TYPE *&lt;span&gt;   &lt;/span&gt;next;&lt;span&gt;       &lt;/span&gt;/* pointer to next node, NULL if end of list */\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;}\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、用于管理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;TYPE&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;类型双向链表的结构，指出链表包含的节点个数以及首尾节点&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;#define UT_LIST_BASE_NODE_T(TYPE)\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;struct {\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;ulint&lt;span&gt; &lt;/span&gt;count;&lt;span&gt;     &lt;/span&gt;/* count of nodes in list */\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;TYPE *&lt;span&gt;   &lt;/span&gt;start;&lt;span&gt;       &lt;/span&gt;/* pointer to list start, NULL if empty */\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;TYPE *&lt;span&gt;   &lt;/span&gt;end;&lt;span&gt; &lt;/span&gt;/* pointer to list end, NULL if empty */\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;}\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、通用内存池结构&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;struct mem_pool_struct{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;byte*&lt;span&gt;      &lt;/span&gt;buf;&lt;span&gt; &lt;/span&gt; /* &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;指向从操作系统申请得到的整个内存区域，所有的内存池操作都是在这一块大的内存区域上完成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;ulint&lt;span&gt;        &lt;/span&gt;size;&lt;span&gt; &lt;/span&gt; //&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;内存池的大小&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;ulint&lt;span&gt;        &lt;/span&gt;reserved;&lt;span&gt; &lt;/span&gt;//&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;已经分配（使用）的内存大小&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;mutex_t&lt;span&gt;          &lt;/span&gt;mutex; //&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;保护内存池的互斥量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;       &lt;/span&gt;UT_LIST_BASE_NODE_T(mem_area_t)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;                     &lt;/span&gt;free_list[64];&lt;span&gt;   &lt;/span&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;一个用来管理内存池的列表，第&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;个负责管理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;2^i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;大小的内存区&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;、内存区头&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:20.1pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;span style="font-size:10.0pt;font-family:Courier;color:navy;"&gt;struct&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;color:gray;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_area_struct&lt;b&gt;{&lt;/b&gt;&lt;span style="color:gray;"&gt;&lt;br/&gt;     &lt;/span&gt;ulint&lt;span style="color:gray;"&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;size_and_free&lt;b&gt;;&lt;/b&gt;&lt;span style="color:gray;"&gt;  &lt;/span&gt;&lt;i&gt;&lt;span style="color:blue;"&gt;/* memory area size is obtained by&lt;br/&gt;                     anding with ~MEM_AREA_FREE; area in&lt;br/&gt;                     a free list if ANDing with&lt;br/&gt;                     MEM_AREA_FREE results in nonzero */&lt;/span&gt;&lt;/i&gt;&lt;span style="color:gray;"&gt; &lt;br/&gt;     &lt;/span&gt;UT_LIST_NODE_T&lt;b&gt;(&lt;/b&gt;mem_area_t&lt;b&gt;)&lt;/b&gt;&lt;span style="color:gray;"&gt;&lt;br/&gt;             &lt;/span&gt;free_list&lt;b&gt;;&lt;/b&gt;&lt;span style="color:gray;"&gt;  &lt;/span&gt;&lt;i&gt;&lt;span style="color:blue;"&gt;/* free list node */&lt;/span&gt;&lt;/i&gt;&lt;span style="color:gray;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:20.1pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;};&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;系统启动时内存管理模块的函数调用顺序如下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt;   &lt;img alt="" src="http://static.oschina.net/uploads/space/2016/0504/014657_glzO_347565.png"/&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-family:宋体;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;InnoDB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;font-family:宋体;"&gt;进程启动后内存管理模块初始化函数调用图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="margin-left:0cm;text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;第一步，系统启动函数首先调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;mem_pool_create&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;函数从操作系统申请&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;(malloc)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;内存并创建一个类型为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;mem_pool_struct&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;的通用内存池实例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;mem_pool_struct *mem_comm_pool&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;，其大小由参数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;srv_mem_pool_size&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;定义，默认为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;8MB. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;完成创建之后的内存池示意图：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="margin-left:0cm;text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;img alt="" height="497" src="http://static.oschina.net/uploads/space/2016/0504/014847_rtTC_347565.jpg" width="687"/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;font-family:宋体;"&gt;初始状态的通用内存池&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="margin-left:0cm;text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;初始化之后，通用内存池向系统申请&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;8MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;内存，由&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;free_list[23]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;元素管理该内存区。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="margin-left:0cm;text-indent:21.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;"&gt;第二步，调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_heap_create_func&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;函数创建内存堆结构，并调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_heap_create_block&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;函数创建其中的首个内存块。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_heap_create_block&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_area_alloc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;函数从通用内存池申请内存，内部&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_area_alloc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;函数根据所申请的内存块大小计算该内存块需要被第&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;个&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;free_list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;元素管理，如果&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;free_list[i]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;上没有空闲内存，则调用&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_pool_fill_free_list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;函数，其根据该所需内存块所在&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;free_list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;列表的位置，即&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;，递归调用自己，以从后续有空闲内存的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;free_list&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;元素中切割它的内存区，然后将分半的内存区逐个向前传递，最终到达&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;free_list[i]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;，于是将该块内存返回给&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;mem_heap_create_block&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="margin-left:0cm;text-indent:20.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;例如，创建内存堆时需要申请一个大小为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;1MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;的内存块（因为每次申请内存堆中的内存块时大小会成倍增长，因此首次申请大小通常较小，系统默认首次申请大小为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;MEM_BLOCK_START_SIZE&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;，为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;64B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;，此处设为&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;font-family:Courier;"&gt;1MB&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;，为了示意方便。），创建完成后内存堆的示意图如下。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="margin-left:0cm;text-indent:20.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;img alt="" height="530" src="http://static.oschina.net/uploads/space/2016/0504/014921_pzLo_347565.jpg" width="694"/&gt;&lt;br/&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:10.5pt;font-family:Courier;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;font-family:宋体;"&gt;初始状态的内存堆，只有一个可用内存块&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
&lt;span&gt;&lt;/span&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span style="font-family:宋体;"&gt;上图所示，二分切割&lt;/span&gt;&lt;span&gt;8MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;的内存区，分为两个&lt;/span&gt;&lt;span&gt;4MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;的内存区，将第一个&lt;/span&gt;&lt;span&gt;4MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;区切割成两个&lt;/span&gt;&lt;span&gt;2MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;内存区，切割第一个&lt;/span&gt;&lt;span&gt;2MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;内存区得到两个空闲的&lt;/span&gt;&lt;span&gt;1MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;的内存区，将第一个空闲的&lt;/span&gt;&lt;span&gt;1MB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;内存区分配和内存堆，每个内存区的起始处包含一个&lt;/span&gt;&lt;span&gt;mem_area_t&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;结构，&lt;/span&gt;&lt;span&gt;size_and_free&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;记录当前内存区大小和是否已分配，同一&lt;/span&gt;&lt;span&gt;free_list&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;元素管理的空闲内存区由该结构中的两个指针&lt;/span&gt;&lt;span&gt;prev&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;、&lt;/span&gt;&lt;span&gt;next&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;链接起来。&lt;/span&gt;&lt;span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span style="font-family:宋体;"&gt;内存池和内存堆创建完成之后，内存堆就可以使用了，当&lt;/span&gt;&lt;span&gt;InnoDB&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;的某个模块需要申请动态内存时，仅需其调用&lt;/span&gt;&lt;span&gt;mem_heap_alloc&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;向内存堆申请内存。&lt;/span&gt;&lt;span&gt;mem_heap_alloc&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;调用图如下。&lt;span&gt;&lt;/span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span style="font-family:宋体;"&gt;     &lt;img alt="" src="http://static.oschina.net/uploads/space/2016/0504/015138_Uhzv_347565.png"/&gt;&lt;br/&gt; &lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span style="font-size:9.0pt;"&gt; &lt;/span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span style="font-size:9.0pt;"&gt;mem_heap_alloc&lt;/span&gt;&lt;span style="font-size:9.0pt;font-family:宋体;"&gt;函数调用图&lt;/span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span&gt;mem_heap_alloc&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;每次先找到内存堆中的最后一个内存块，检查该内存块的空闲空间是否足够，如果足够，就在该内存块上划出适量空间（将申请内存的&lt;/span&gt;&lt;span&gt;size &lt;/span&gt;&lt;span style="font-family:宋体;"&gt;按&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;字节向上对齐），如果当前快空闲空间不足，则调用&lt;/span&gt;&lt;span&gt;mem_heap_add_block&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;向内存池申请内存，由&lt;/span&gt;&lt;span&gt;mem_heap_create_block&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;函数创建新的内存块，再从新的内存块中划出空间返回给上层应用。&lt;/span&gt;&lt;span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;span style="font-family:宋体;"&gt;内存堆释放内存时，与内存的分配相反。先释放内存堆中的最后一个内存块的空间，且在内存块中释放每小块上层应用申请的内存时，&lt;/span&gt;&lt;span&gt; mem_heap_free_heap_top&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;只能自后向前释放，每次释放只需修改该内存块结构的&lt;/span&gt;&lt;span&gt;free&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;值，以标志当前块中空闲空间的偏移，如果当前内存块的空间全部释放，则调用&lt;/span&gt;&lt;span&gt;mem_heap_block_free&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;从堆中删除该内存块，该函数调用&lt;/span&gt;&lt;span&gt;mem_area_free&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;将该内存块的空间还给内存池。由于内存池采用伙伴系统来管理内存，因此&lt;/span&gt;&lt;span&gt;mem_area_free&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;首先调用&lt;/span&gt;&lt;span&gt;mem_area_get_buddy&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;函数获取当前内存区的伙伴&lt;/span&gt;&lt;span&gt;buddy&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;，然后判断&lt;/span&gt;&lt;span&gt;buddy&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;是不是空闲的，如果不是，则将该块内存区交给其对应的&lt;/span&gt;&lt;span&gt;free_list&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;元素管理；如果&lt;/span&gt;&lt;span&gt;buddy&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;是空闲的，则将其余&lt;/span&gt;&lt;span&gt;buddy&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;合并，并递归调用&lt;/span&gt;&lt;span&gt;mem_area_free&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;函数，直到空闲内存区无法与其伙伴合并为大的空闲内存区，然后将得到的大块内存区交给对应的&lt;/span&gt;&lt;span&gt;free_list&lt;/span&gt;&lt;span style="font-family:宋体;"&gt;元素管理。某个需要释放内存的函数调用顺序如下图所示。&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-indent:21.0pt;"&gt; &lt;img alt="" height="303" src="http://static.oschina.net/uploads/space/2016/0504/015159_EUfU_347565.png" width="704"/&gt;&lt;br/&gt; &lt;span style="font-family:宋体;"&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span style="font-size:9.0pt;"&gt; &lt;/span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p style="text-align:center;text-indent:18.0pt;"&gt; &lt;span style="font-size:9.0pt;font-family:宋体;"&gt;释放内存的函数调用顺序图&lt;/span&gt;&lt;span style="font-size:9.0pt;"&gt;&lt;/span&gt; &lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 01:52</pubDate></item><item><title>OSChina 周三乱弹 ——所有树都绿了，却不知道谁干的！ -  小小编辑的个人页面 - 开源中国社区</title><link>http://my.oschina.net/xxiaobian/blog/669362</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;@&lt;a href="http://my.oschina.net/CeShiXiaoSongShu" rel="nofollow" target="_blank"&gt;测试小松鼠&lt;/a&gt; : 又是新的一个月了。&lt;/p&gt;
&lt;p&gt;新岁月，新活力。不改变的是我们的初心。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;来听一下教父的歌，《不会改变》。&lt;/p&gt;
&lt;p&gt;来自@&lt;a href="http://my.oschina.net/u/2334482" name="668931" rel="nofollow" target="_blank"&gt;开源中国首席不想说话&lt;/a&gt;的推荐。&lt;/p&gt;
&lt;p&gt; &lt;embed height="33" src="http://www.xiami.com/widget/438978_1771716747/singlePlayer.swf" type="application/x-shockwave-flash" width="257"&gt;&lt;/embed&gt;&lt;/p&gt;
&lt;p&gt;手机党少年们想听歌，请使劲儿戳（&lt;a href="http://www.xiami.com/song/1771716747?spm=a1z1s.3521865.23309997.1.YALwPK" rel="nofollow" target="_blank"&gt;这里&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/202752_xCOX_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/u/2337744" rel="nofollow" target="_blank"&gt;程序媛_Mickey &lt;/a&gt;: 练车几天没上网看新闻…突然发现百度火了…为什么……… &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;用一句话总结，魏则西被骗，患癌去世事件，开始猛刷百度竞价推广伙同&lt;span style="color: rgb(51, 51, 51); font-family: arial; font-size: 13px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 20.02px; orphans: auto; text-align: left; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none; background-color: rgb(255, 255, 255);"&gt;莆田系医院&lt;/span&gt;欺骗患者。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/235819_tROz_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;这些问题说到底还是钱，&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/u/102746" rel="nofollow" target="_blank"&gt;ff100&lt;/a&gt; : 据摩根大通研报，百度2014年总营收中，医疗广告占15%-25%，其中30%-50%来自民营医院。百度对医疗广告收费比非医疗行业高近10倍。&lt;/p&gt;
&lt;p&gt;现在百度是利益名声双双受损。&lt;/p&gt;
&lt;p&gt;百度需要公关，挽回自己的损失了吧。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/jhasheng?fromerr=StHzUte8" rel="nofollow" target="_blank"&gt;krasen&lt;/a&gt; : 魏则西事件爆出来以后，百度公关部门相关领导焦头烂额。急忙打开百度搜索专业律师，然后就被骗了。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/000411_flmQ_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;人家一秒钟几十万上下，&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/001148_TmgL_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;咱们这些p民，还是关心点我们需要关心的事好了。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/itlabers" rel="nofollow" target="_blank"&gt;demon&lt;/a&gt; : 现在的互联网大佬，谁手里不攥着几十条人命，吃喝玩乐购，哪一样都会致人命，食品安全，环境污染，游戏沉迷，剁手党，又岂是一个假广告，这么简单的事，等风头过了，该上班还得上班，这不是咱们操心的事。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/001238_9J0A_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;用程序员的思维，思考一下这个魏则西还有啥缺憾。&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/pengone" rel="nofollow" target="_blank"&gt;会打鲳鱼的鹏&lt;/a&gt; : 面对精神和身体的折磨，魏则西不止一次想过自杀。不过，他觉得至少还要做两件事：一是写些东西。他的生病感受、人生观的变化，对历史、社会和政治的一点点 想法。这本书是他计划六、七十岁写的。第二是，抓紧时间学学c++，写个应用，了却自己的一个心愿——如果不幸发生，父母用着他写的应用，也能有几分寄托。&lt;/p&gt;
&lt;p&gt;归根结底还是钱的问题。&lt;/p&gt;
&lt;p&gt;所以：加班！&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/daihui" rel="nofollow" target="_blank"&gt;d470969047h&lt;/a&gt; : 动次打次动次打次。。。加班写文档呀！&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/Ales" rel="nofollow" target="_blank"&gt;Ales_小溪 &lt;/a&gt;: 是不是加班的都是效率不高的。。。&lt;/p&gt;
&lt;p&gt;你加班玩游戏，效率一定有提升。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/002312_0iq5_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/u/1397000" rel="nofollow" target="_blank"&gt;Sonnet&lt;/a&gt; : 其实还有更反感的：别人QQ一上来就抖你，当你在专心撸代码的时候，突然被打断，想杀人的心都有，就像你在做一件事情，别人突然从后面给你一巴掌一样（我被这样一个人烦过很多次，又得罪不得）&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/isronik" rel="nofollow" target="_blank"&gt;Isronik&lt;/a&gt; ：调为免打扰就好了。&lt;/p&gt;
&lt;p&gt;谁打扰你，你就问问他抗揍么？&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/002653_4GA1_1428332.jpg"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;其实成长中你会遇到各种奇怪的事情。学会淡定。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003155_KoFU_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;所有树都绿了，却不知道谁干的。真相只有一个！&lt;/p&gt;
&lt;p&gt;隔壁老王团战必须死。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003156_dbc9_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;论感性的力量。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003157_5oB5_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003158_jmZV_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;这哪儿是做作业啊，简直是一场战争。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/004748_HDIg_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003159_9jVb_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;剩下的TT钱够买绿帽子的了。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/005144_xpHT_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003200_bmpQ_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003200_0QFE_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/005342_eW8E_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003201_sRTP_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;爹娘闻女来，自挂东南枝。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0504/003201_uAK4_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;&lt;strong&gt;【小树的世界之旅】&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、湖北枣阳郭家庙曾国墓地，又有重大新发现！2日，湖北省文物考古研究所在湖北音乐博物馆古琴馆开馆仪式上正式对外披露，郭家庙曹门湾墓区近日出土一张春秋早期的琴，比此前已知最早的琴年代提前约300年，改写中国古琴史乃至音乐史。&lt;br/&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/164012_daUv_1428332.jpg"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这一摊就是琴么。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、因为觉得自己的脸型不够完美，缺憾在于下巴有些短，舞蹈老师王女士经不住美容院妹妹的忽悠，打了一针进口的“生长因子”。此后，王老师的下巴就开始不停地长啊长。为此，王老师只有忍痛去医院切除了多余的下巴，本以为可以从此告别噩梦，可结果却让王老师很窝火，切了之后还在长。待王老师去找“美容大师”算账时，却发现美容院已人去楼空。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/164742_GzLN_1428332.jpg"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好担心这个妹子下巴再张张，就变成滑梯啊。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;坐在脸上就”刺溜“滑下来了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、4月29日，趁着春暖花开，日照市民许女士与女性好友小田一起来到银河公园游玩采风，不过在公园里，突然冒出一个“变态男”来到小田面前抱起了她的腿，竟然把小田的鞋子抢走了，而且一边跑一边把鞋子放在鼻子上闻，看上去很享受的样子。，让她们惊愕不已。许女士称，这个男青年看上去非常普通，不胖不瘦的，说的是普通话，不像是神经病什么的。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/165242_FugN_1428332.jpg"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;估计抢的是杨幂的鞋子，这会儿劫匪已经火化了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、正在美国度假的史墨客总领事日前与多年来的伴侣吕英宗先生正式成婚了。他们的仪式是在加州的旧金山举行的，这座城市在LGBT平权运动中的地位举足轻重。资深外交官史墨客于2014年9月就任美国驻上海总领事。他曾经在美国驻雅温得、哥本哈根、金边、曼谷、喀布尔以及北京大使馆工作。另外，史先生还曾就职于国务院日本事务办公室以及美国在台协会，并领导了美国在伊拉克穆萨纳省的地方重建工作。他拥有美国乔治城大学学士学位以及伦敦政治经济学院和普林斯顿大学的硕士学位，能够说法语、丹麦语、高棉语和汉语。史先生来自缅因州，伴侣是吕英宗。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/165957_LD2T_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/165957_WY2D_1428332.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同志&lt;br/&gt;组织上要求你长期潜伏美国，直到解放全人类&lt;br/&gt;现在你的身份是美驻上海总领事夫人&lt;br/&gt;代号美人鱼~&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;5、近日，前往加拿大北极群岛探险的51岁的约翰.洛林斯（John Rollins）在巴芬岛海岸抓拍到一组北极熊啃食海豹尸体的照片。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/170624_ALtr_1428332.jpg"/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;这吃相，脸上都是饭渣渣。&lt;/p&gt;
&lt;p&gt;萌的宝宝一脸血。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span style="color: rgb(51, 51, 51); font-family: Arial, 'Microsoft YaHei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: 23px; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none; background-color: rgb(255, 255, 255);"&gt;&lt;span style="font-size: 16px;"&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px;"&gt;&lt;strong&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px;"&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;span style="font-size: 16px;"&gt;【小树的角色Play剧场&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;】&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（本期剧本导演：@&lt;a href="http://my.oschina.net/nnnm" rel="nofollow" target="_blank"&gt;nnnm&lt;/a&gt;，友情客串：@&lt;a href="http://my.oschina.net/canghaidekongjian" rel="nofollow" target="_blank"&gt;沧海_Sea&lt;/a&gt;@&lt;a href="http://my.oschina.net/jfree" rel="nofollow" target="_blank"&gt;JFree&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/canghaidekongjian" rel="nofollow" target="_blank"&gt;沧海_Sea&lt;/a&gt;君有过几个项目的经历后，总感觉着验收的效果总是与想像的不大一样。于是便向带头大哥@&lt;a href="http://my.oschina.net/jfree" rel="nofollow" target="_blank"&gt;JFree&lt;/a&gt;求教。 带头大哥@&lt;a href="http://my.oschina.net/jfree" rel="nofollow" target="_blank"&gt;JFree&lt;/a&gt;想了想说：项目这东西吧就，一开始是给用户抛个广告片，精美，美到不要不要的。签约后是需求与设计、开发的磨合，磨到不要不要的。测试时，是大家来找茬，烦得也是不要不要的。如此下来项目也就这样了。 @&lt;a href="http://my.oschina.net/canghaidekongjian" rel="nofollow" target="_blank"&gt;沧海_Sea&lt;/a&gt;君若有所思的说：噢！我明白了！理想与现实总是有差别的！经过若干修正的项目才是实际需求和使用最贴近的项目！ 带头大哥@&lt;a href="http://my.oschina.net/jfree" rel="nofollow" target="_blank"&gt;JFree&lt;/a&gt;疑惑的看了看@&lt;a href="http://my.oschina.net/canghaidekongjian" rel="nofollow" target="_blank"&gt;沧海_Sea&lt;/a&gt;君说：这样的项目，交出去后都是不要的！不要的！不要的！&lt;/p&gt;
&lt;p&gt;hahahaha 不过这个真的是真理。交出去的项目了。被验收就代表终结了。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;情绪不好？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p style="margin-top: 8px; margin-bottom: 8px; line-height: 22.5px; white-space: normal; padding: 0px; letter-spacing: 0.5px; word-wrap: break-word; word-break: break-all; color: rgb(51, 51, 51); font-family: 'Microsoft YaHei', Verdana, sans-serif, 宋体; background-color: rgb(255, 255, 255);"&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;关注同学们的生理心理健康&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;又进入大家喜闻乐见的&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px;"&gt;【&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px;"&gt;小树医生心理生理医务室】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 16px;"&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px;"&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px;"&gt;&lt;img src="http://static.oschina.net/uploads/space/2016/0503/175428_jx2Q_1428332.jpeg"/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我有个朋友是个Gay，我总是对他很好奇。&lt;/p&gt;
&lt;p&gt;有一天终于忍不住问：“你一开始是怎么变成gay的？” &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;他说：“12岁那年，有个男人跟着我进了一个树林，然后强奸我”&lt;/p&gt;
&lt;p&gt;“那你为什么不跑？” &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;“穿高跟鞋怎么跑啊？”&lt;/p&gt;
&lt;p&gt;再来一个：&lt;/p&gt;
&lt;p&gt;小时候记得那会好穷，&lt;/p&gt;
&lt;p&gt;只能眼巴巴得羡慕别人可以在家里洗澡，&lt;/p&gt;
&lt;p&gt;可就是不明白为啥要打我？&lt;/p&gt;
&lt;p&gt;还追着打我呢？ &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;难道就因为我穷？&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;span style="font-size: 16px;"&gt;【看片】&lt;/span&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;embed flashvars="aid=3547752&amp;amp;page=1" height="415" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" quality="high" src="http://static.hdslb.com/miniloader.swf" type="application/x-shockwave-flash" width="544"&gt;&lt;/embed&gt;&lt;/p&gt;
&lt;p&gt;好贱，剧终有彩蛋。&lt;/p&gt;
&lt;p&gt;手机党少年们想看视频，请使劲儿戳（&lt;a href="http://www.bilibili.com/video/av3547752/" rel="nofollow" target="_blank"&gt;这里&lt;/a&gt;） &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 14px;"&gt;&lt;strong&gt;&lt;strong&gt;-----------写在篇末的话--------------&lt;/strong&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;真的是黑色星期二，太多话不说了。好难过。&lt;/p&gt;
&lt;p&gt;我一直在酝酿一个新的板块，不过素材没有堆积太多。我有拖延症啦。&lt;/p&gt;
&lt;p&gt;一忙又是一个星期，看着稿件库的资料苦笑。&lt;/p&gt;
&lt;p&gt;新的板块和别的板块一样，强调互动性。&lt;/p&gt;
&lt;p&gt;在以前的几期里，有大家给我过意见。希望能早一天上线。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: 16px;"&gt;【感谢】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/u/1986131" name="668931" rel="nofollow" target="_blank"&gt;剑仁&lt;/a&gt;：居然没有程序员的武器，差评。@&lt;a href="http://my.oschina.net/u/2353317" name="668931" rel="nofollow" target="_blank"&gt;YANG_YAWEI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答：今天给好评啦。感谢你每天都留言。&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/u/1473251" name="668931" rel="nofollow" target="_blank"&gt;会飞的鱼&lt;/a&gt;：不喜欢看武器，离得太远了。@&lt;a href="http://my.oschina.net/u/928919" name="668931" rel="nofollow" target="_blank"&gt;大猛0403&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/1397000" name="668931" rel="nofollow" target="_blank"&gt;Sonnet&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/170672" name="668931" rel="nofollow" target="_blank"&gt;轩辕剑&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;答：喏，今天就上程序员的武器啦~hahahaha。感谢你们的建议。感谢大萌。&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="font-size: 16px;"&gt;【感谢】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;@&lt;a href="http://my.oschina.net/u/697806" name="668931" rel="nofollow" target="_blank"&gt;锅锅&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/2405670" name="668931" rel="nofollow" target="_blank"&gt;卡布达巨人&lt;/a&gt;（哼~）@&lt;a href="http://my.oschina.net/u/1048770" name="668931" rel="nofollow" target="_blank"&gt;JohntoString&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/105027" name="668931" rel="nofollow" target="_blank"&gt;nnnm&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/1255224" name="668931" rel="nofollow" target="_blank"&gt;西北醉儒&lt;/a&gt;（都不开心了是吧）@&lt;a href="http://my.oschina.net/u/1155565" name="668931" rel="nofollow" target="_blank"&gt;Annaly&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/1473251" name="668931" rel="nofollow" target="_blank"&gt;会飞的鱼&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/928919" name="668931" rel="nofollow" target="_blank"&gt;大猛0403&lt;/a&gt;（大萌）@&lt;a href="http://my.oschina.net/u/2334345" name="668931" rel="nofollow" target="_blank"&gt;沧海_Sea&lt;/a&gt;（你猜）@&lt;a href="http://my.oschina.net/u/1461127" name="668931" rel="nofollow" target="_blank"&gt;苏陌年&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/563312" name="668931" rel="nofollow" target="_blank"&gt;JFree&lt;/a&gt;（不可以，不可以）@&lt;a href="http://my.oschina.net/u/2462235" name="668931" rel="nofollow" target="_blank"&gt;彩虹哭了丶&lt;/a&gt;（还是你好）@&lt;a href="http://my.oschina.net/u/1755992" name="668931" rel="nofollow" target="_blank"&gt;dwl301&lt;/a&gt;（终于恢复啦，可喜可贺）@&lt;a href="http://my.oschina.net/u/170672" name="668931" rel="nofollow" target="_blank"&gt;轩辕剑&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/2336380" name="668931" rel="nofollow" target="_blank"&gt;_Answer&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/2304702" name="668931" rel="nofollow" target="_blank"&gt;桃夭来了&lt;/a&gt;（妖妖）@&lt;a href="http://my.oschina.net/u/2462461" name="668931" rel="nofollow" target="_blank"&gt;ZERONER&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/347223" name="668931" rel="nofollow" target="_blank"&gt;clouddyy&lt;/a&gt;（小树守护者）@&lt;a href="http://my.oschina.net/u/1397000" name="668931" rel="nofollow" target="_blank"&gt;Sonnet&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/33532" name="668931" rel="nofollow" target="_blank"&gt;jobenc&lt;/a&gt;（还好意思说自己不来，字都打错了，是怎么）@&lt;a href="http://my.oschina.net/u/1412170" name="668931" rel="nofollow" target="_blank"&gt;王钰玺&lt;/a&gt;（大王，知道咯，好暖。）@&lt;a href="http://my.oschina.net/u/1768200" name="668931" rel="nofollow" target="_blank"&gt;开源中国神盾局局长&lt;/a&gt;（早晨局长大人）@&lt;a href="http://my.oschina.net/u/2334482" name="668931" rel="nofollow" target="_blank"&gt;开源中国首席不想说话&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/816250" name="668931" rel="nofollow" target="_blank"&gt;李惟其&lt;/a&gt;（多谢支持）@&lt;a href="http://my.oschina.net/u/660460" name="668931" rel="nofollow" target="_blank"&gt;茶l壶&lt;/a&gt;（主要是都好贵）@&lt;a href="http://my.oschina.net/u/1986131" name="668931" rel="nofollow" target="_blank"&gt;剑仁&lt;/a&gt;（今天会开心了吧 hhhh）@&lt;a href="http://my.oschina.net/u/2613440" name="668931" rel="nofollow" target="_blank"&gt;codeIsMyGirl&lt;/a&gt; （heihei）@&lt;a href="http://my.oschina.net/u/2353317" name="668931" rel="nofollow" target="_blank"&gt;YANG_YAWEI&lt;/a&gt;@&lt;a href="http://my.oschina.net/u/2346260" name="668931" rel="nofollow" target="_blank"&gt;zxl78585&lt;/a&gt;（嗯，你要每天都来看呀）@&lt;a href="http://my.oschina.net/u/2311018" name="668931" rel="nofollow" target="_blank"&gt;yongxing510&lt;/a&gt;（没有啦 这几天身体舒服。）@&lt;a href="http://my.oschina.net/u/189644" name="668931" rel="nofollow" target="_blank"&gt;左崖花开&lt;/a&gt;（玩疯了）&lt;/p&gt;
&lt;p style="padding: 0px; margin-top: 8px; margin-bottom: 8px; line-height: 22.5px; letter-spacing: 0.5px; white-space: normal; word-wrap: break-word; word-break: break-all; color: rgb(51, 51, 51); font-family: Verdana, sans-serif, 宋体; background-color: rgb(255, 255, 255);"&gt;&lt;span style="padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-size: 14px;"&gt;&lt;strong&gt;马上扫一扫下面的二维码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 14px;"&gt;&lt;strong&gt;&lt;a href="http://static.oschina.net/uploads/space/2016/0201/190359_8agQ_2315633.jpg" rel="nofollow" target="_blank"&gt;&lt;img height="176" src="http://static.oschina.net/uploads/space/2016/0201/190359_8agQ_2315633.jpg" title="" width="650"/&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;span style="padding: 0px; margin: 0px; font-size: 14px;"&gt;&lt;strong&gt;（扫一扫，关注OSChina微信号，每天为你送上精选资讯早点，还有每天的 OSChina&lt;strong&gt; 乱弹&lt;/strong&gt;哦）&lt;/strong&gt;&lt;/span&gt;&lt;a href="http://my.oschina.net/u/1787663" name="668366" rel="nofollow" target="_blank"&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 00:56</pubDate></item><item><title>Monad State in Haskell 笔记 -  Kyli的个人页面 - 开源中国社区</title><link>http://my.oschina.net/kylidboy/blog/669358</link><description>&lt;div class="BlogContent"&gt;&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;(Monad m) =&amp;gt; m a &amp;gt;&amp;gt; m b = m a &amp;gt;&amp;gt;= \_ -&amp;gt; m b&lt;/pre&gt;
&lt;p&gt;每次都会被&amp;gt;&amp;gt;是简版的&amp;gt;&amp;gt;=，这一点迷惑&lt;/p&gt;
&lt;p&gt;其实心中要记住的是，说是简版，只能说是逻辑上忽略&amp;gt;&amp;gt;左边的action的值，而直接bind后面的monad，与其说是简版，还不如说是wrap版的，因为最后拆开里面还是一个&amp;gt;&amp;gt;=........&lt;/p&gt;
&lt;p&gt;所以当一些Monad的实例，定义了复杂的&amp;gt;&amp;gt;=，那么&amp;gt;&amp;gt;的逻辑会远比用 do 语法糖的时候，来的复杂，&lt;/p&gt;
&lt;p&gt;State就是如此，&lt;/p&gt;
&lt;p&gt;每次看到rollDie的定义的时候，都会怀疑为什么state会被传递，一眼真的开不出来：&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;import Controll.Monad.Trans.State
import System.Random
type DiceState = State StdGen
rollDie :: DiceState Int
rollDie = do
        gen &amp;lt;- get
        let (value, gen') = randomR(1, 6) gen
        put gen'
        return value&lt;/pre&gt;
&lt;p&gt;如果改写成bind的话，&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;get &amp;gt;&amp;gt;= \gen -&amp;gt; 
    let (val, gen') = randomR(1, 6) gen 
    in put gen' &amp;gt;&amp;gt; return val&lt;/pre&gt;
&lt;p&gt;那么，再把最后一句的&amp;gt;&amp;gt;打开&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;put gen' &amp;gt;&amp;gt;= \_ -&amp;gt; return val&lt;/pre&gt;
&lt;p&gt;再套用State的&amp;gt;&amp;gt;=的定义：&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;state $ \st -&amp;gt;
    let (xxx, st') = runState (put gen') st 
    in runState ((\_ -&amp;gt; return val) xxx) st'&lt;/pre&gt;
&lt;p&gt;可以看到，put gen'产生的state $ \st -&amp;gt; ((), st)，由此获得的xxx会被 "\_" 忽略(本身就是空())，然后&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;runState ((\_ -&amp;gt; return val) xxx)&lt;/pre&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;pre class="brush:cpp;toolbar: true; auto-links: false;"&gt;\st'' -&amp;gt; (val, st'')&lt;/pre&gt;
&lt;p&gt;这样状态st'就被打包在最终生成的State的状态函数中，实现了传递&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;说实在的，自己也看不懂了，哇哈哈哈哈哈哈&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 00:30</pubDate></item><item><title>Shell 备忘录【1】 -  Inchin的个人页面 - 开源中国社区</title><link>http://my.oschina.net/inchtek/blog/669357</link><description>&lt;div class="BlogContent"&gt;&lt;p&gt;1、比较&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;-eq       等于,如:if [ "$a" -eq "$b" ]
-ne       不等于,如:if [ "$a" -ne "$b" ]
-gt       大于,如:if [ "$a" -gt "$b" ]
-ge       大于等于,如:if [ "$a" -ge "$b" ]
-lt       小于,如:if [ "$a" -lt "$b" ]
-le       小于等于,如:if [ "$a" -le "$b" ]
-z       字符串为"null".就是长度为0. if [ -z "$a" ]
-n       字符串不为"null" if [ -n "$a" ]&lt;/pre&gt;
&lt;p&gt;2、检测变量类型&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;# check value type
function check(){
        local a="$1"
        printf "%d" "$a" &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo "integer" &amp;amp;&amp;amp; return
        printf "%d" "$(echo $a|sed 's/^[+-]\?0\+//')" &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo "integer" &amp;amp;&amp;amp; return
        printf "%f" "$a" &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; echo "number" &amp;amp;&amp;amp; return
        [ ${#a} -eq 1 ] &amp;amp;&amp;amp; echo "char" &amp;amp;&amp;amp; return
        echo "string"
}&lt;/pre&gt;
&lt;p&gt;3、计算文件行数&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;max_count=$(wc -l ./host.list |awk '{ print $1 }')&lt;/pre&gt;
&lt;p&gt;4、for循环读取&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;for ip in $(head -n 20 ./host.list)
do
  echo $ip
  ssh $ip 'hostname'
done;&lt;/pre&gt;
&lt;p&gt;5、用密码自动登录&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;auto_login_ssh () {
    expect -c "set timeout -1;
                spawn -noecho ssh -o StrictHostKeyChecking=no $2 ${@:3};
                expect *assword:*;
                send -- $1\r;
                interact;";
}
auto_login_ssh password root@10.10.10.10&lt;/pre&gt;
&lt;p&gt;6、执行远程机器命令&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;fr=$(echo `ssh root@$ip "find / -name $1"`)
     if [ "$fr" == "" ]
        then
          echo "Not Found "
        else
          echo "Found it: $fr"
        fi&lt;/pre&gt;
&lt;p&gt;7、while遍历文件&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;while read line
do
  echo $line
done &amp;lt; ./host.list&lt;/pre&gt;
&lt;p&gt;8、输入隐藏并验证密码，echo不换行&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;while [ -z $bigpass ] || [ "$bigpass" !=  "$bigpass2" ]
do
  if [ -n "$bigpass" ]
  then
    echo "Sorry, passwords do not match. pls retry"
  fi
  echo -n "Password:"
  stty -echo
  echo ""
  read bigpass
  stty echo
  echo -n "Confirm password:"
  stty -echo
  read bigpass2
  stty echo
  echo ""
done&lt;/pre&gt;
&lt;p&gt;9、输出本地格式日期&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;echo  "$(date +%Y%m%d%H%M%S).old"&lt;/pre&gt;
&lt;p&gt;10、算术运算&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;运算符号依旧是 + - * /
不过使用时候要注意：

r=`expr 4 + 5`
r=$(( 4 + 5 ))
r=$[ 4 + 5 ]
let r=4 + 5

r=`expr 4 \* 5`
r=$(( 4 * 5 ))
r=$[ 4 * 5 ]
let r=4 * 5

r=`expr 40 / 5`
r=$(( 40 / 5 ))
r=$[ 40 / 5 ]
let r=40/5 

乘幂 (如 2 的 3 次方)
r=$(( 2 ** 3 ))
r=$[ 2 ** 3 ]
expr 沒有乘幂&lt;/pre&gt;
&lt;p&gt;11、输出彩色字符&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;#!/bin/sh
NORMAL=$(tput sgr0)
GREEN=$(tput setaf 2; tput bold)
YELLOW=$(tput setaf 3)
RED=$(tput setaf 1)

function red() {
    echo -e "$RED$*$NORMAL"
}

function green() {
    echo -e "$GREEN$*$NORMAL"
}

function yellow() {
    echo -e "$YELLOW$*$NORMAL"
}

# To print success
green "Task has been completed"

# To print error
red "The configuration file does not exist"

# To print warning
yellow "You have to use higher version."&lt;/pre&gt;
&lt;p&gt;12、shell中的特殊变量&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;$0：当前脚本的文件名

$num：num为从1开始的数字，$1是第一个参数，$2是第二个参数，${10}是第十个参数

$#：传入脚本的参数的个数

$*：所有的位置参数(作为单个字符串)

$@：所有的位置参数(每个都作为独立的字符串)。

$?：当前shell进程中，上一个命令的返回值，如果上一个命令成功执行则$?的值为0，否则为其他非零值，常用做if语句条件

$$：当前shell进程的pid

$!：后台运行的最后一个进程的pid

$-：显示shell使用的当前选项

$_：之前命令的最后一个参数&lt;/pre&gt;
&lt;p&gt;13、删除文件中某行&lt;br/&gt;&lt;/p&gt;
&lt;pre class="brush:shell;toolbar: true; auto-links: false;"&gt;比如：在1.txt里有以下内容：
HELLO=1
NI=2
WORLD=3
I Love China.
Love all
....

如果是要删除第三行：
sed -i '3d' 1.txt

如果删除以Love开头的行
sed -i '/^Love/d' 1.txt

删除包含Love的行
sed -i '/Love/d' 1.txt&lt;/pre&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 00:30</pubDate></item><item><title>JAVA - 优雅的记录日志（log4j实战篇） -  引鸩怼孑的个人空间 - 开源中国社区</title><link>http://my.oschina.net/u/2273085/blog/669351</link><description>&lt;div class="BlogContent"&gt;&lt;ul&gt;
&lt;li&gt; &lt;span style="font-size:16px;font-family:隶书;"&gt;&lt;strong&gt;写在前面&lt;br/&gt; 项目开发中，记录错误日志有以下好处：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 方便调试&lt;br/&gt; 便于发现系统运行过程中的错误&lt;br/&gt; 存储业务数据，便于后期分析&lt;br/&gt; 在java中，记录日志有很多种方式：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 自己实现&lt;br/&gt; 　　　　自己写类，将日志数据，以io操作方式，写数据到文本文件、数据库中。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 使用log4j&lt;br/&gt; 　　　　log4j可以将日志输出到console窗口、文本文件、数据库等，功能强大！&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 使用slfj&lt;br/&gt; 　　　　slfj也是一个很强大的功能，slfj旨在一统天下，提供了logging.jar 和 log4j的接口，可以通过slfj来调用log4j，也可以调用jdk的logging。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 使用jdk自带的logging.jar中的方法&lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 1、log4j需要导入的包&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 一般使用log4j需要与logging配合使用：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; commons-logging-1.0.4.jar&lt;br/&gt; log4j-1.2.15.jar&lt;br/&gt; 2、添加配置文件&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 在src下，把log4j的配置文件添加进去log4j.properties&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 标准的properties文件(Properties文件操作)&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 3、建立类文件+主函数&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 4、修改配置文件，将日志输出到console&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4J配置文件为：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ### 设置级别和目的地(这里多个目的地) ###&lt;br/&gt; log4j.rootLogger = DEBUG,CONSOLE&lt;br/&gt; ### 这里的me是包，也就是在这个包记录日志时，是只记录debug及以上级别的日志&lt;br/&gt; log4j.logger.me=DEBUG&lt;br/&gt; ### 输出到控制台 ###&lt;br/&gt; log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender&lt;br/&gt; log4j.appender.CONSOLE.Target = System.out&lt;br/&gt; log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout&lt;br/&gt; log4j.appender.CONSOLE.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{1}:%L - %m%n &lt;br/&gt; main主函数调用：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; import org.apache.log4j.Logger;&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; public class Log4jTest {&lt;br/&gt;    public static Logger logger1 = Logger.getLogger(Log4jTest.class);&lt;br/&gt;    public static void main(String[] args) {&lt;br/&gt;        //logger1&lt;br/&gt;        logger1.trace("我是logger1，trace");&lt;br/&gt;        logger1.debug("我是logger1，debug");&lt;br/&gt;        logger1.info("我是logger1，info");&lt;br/&gt;        logger1.warn("我是logger1，warn");&lt;br/&gt;        logger1.error("我是logger1，error");&lt;br/&gt;        logger1.fatal("我是logger1，fatal");&lt;br/&gt;    }&lt;br/&gt; }&lt;br/&gt; 可以看到console中输出内容：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 16:51:16,575 DEBUG Log4jTest:15 [main:0]- 我是logger1，debug&lt;br/&gt; 16:51:16,578  INFO Log4jTest:16 [main:3]- 我是logger1，info&lt;br/&gt; 16:51:16,578  WARN Log4jTest:17 [main:3]- 我是logger1，warn&lt;br/&gt; 16:51:16,578 ERROR Log4jTest:18 [main:3]- 我是logger1，error&lt;br/&gt; 16:51:16,578 FATAL Log4jTest:19 [main:3]- 我是logger1，fatal&lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 5、设定输出的格式&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 在标题4中，看到console的输出内容，是按一定格式输出，格式的配置还是来自于配置文件log4j.properties&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 日志输出格式，所用到的参数如下，按需添加：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL,&lt;br/&gt; %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002nian10月18日22：10：28，921&lt;br/&gt; %r: 输出自应用启动到输出该log信息耗费的毫秒数&lt;br/&gt; %c: 输出日志信息所属的类目，通常就是所在类的全名&lt;br/&gt; %t: 输出产生该日志事件的线程名&lt;br/&gt; %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)&lt;br/&gt; %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。&lt;br/&gt; %%: 输出一个”%”字符&lt;br/&gt; %F: 输出日志消息产生时所在的文件名称&lt;br/&gt; %L: 输出代码中的行号&lt;br/&gt; %m: 输出代码中指定的消息,产生的日志具体信息&lt;br/&gt; %n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行&lt;br/&gt; 可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：&lt;br/&gt; 1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。&lt;br/&gt; 2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，”-”号指定左对齐。&lt;br/&gt; 3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。&lt;br/&gt; 4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。&lt;br/&gt; 1&lt;br/&gt;  &lt;br/&gt; 6、将日志输出到文本文件&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j配置文件：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ### 设置级别和目的地(这里多个目的地) ###&lt;br/&gt; log4j.rootLogger = trace,CONSOLE,zhangsanLog&lt;br/&gt; log4j.logger.me=DEBUG&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ### 输出到控制台 ###&lt;br/&gt; log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender&lt;br/&gt; log4j.appender.CONSOLE.Target = System.out&lt;br/&gt; log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout&lt;br/&gt; log4j.appender.CONSOLE.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{1}:%L [%t:%r]- %m%n&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ### 输出到日志文件 ###&lt;br/&gt; log4j.appender.zhangsanLog = org.apache.log4j.DailyRollingFileAppender&lt;br/&gt; log4j.appender.zhangsanLog.File =G\:\\var\\alldata\\zhenduan\\debug.log&lt;br/&gt; #log4j.appender.zhangsanLog.File =/var/alldata/zhenduan/debug.log&lt;br/&gt; log4j.appender.zhangsanLog.Append = true&lt;br/&gt; ## 只输出DEBUG级别以上的日志&lt;br/&gt; log4j.appender.zhangsanLog.Threshold = DEBUG&lt;br/&gt; #'.'yyyy-MM-dd: 每天产生一个新的文件&lt;br/&gt; log4j.appender.zhangsanLog.DatePattern = '.'yyyy-MM-dd&lt;br/&gt; log4j.appender.zhangsanLog.layout = org.apache.log4j.PatternLayout&lt;br/&gt; log4j.appender.zhangsanLog.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t:%r] - [%p] [%c{1}:%L] [%M] %m%n&lt;br/&gt; log4j.additivity.zhangsanLog = false&lt;br/&gt; main函数调用：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; public static Logger logger1 = Logger.getLogger(Log4jTest.class);&lt;br/&gt; public static void main(String[] args) {&lt;br/&gt;    //logger1&lt;br/&gt;    logger1.trace("我是logger1，trace");&lt;br/&gt;    logger1.debug("我是logger1，debug");&lt;br/&gt;    logger1.info("我是logger1，info");&lt;br/&gt;    logger1.warn("我是logger1，warn");&lt;br/&gt;    logger1.error("我是logger1，error");&lt;br/&gt;    logger1.fatal("我是logger1，fatal");&lt;br/&gt; }&lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 7、每一小时、每天、每半天生成一个文件&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 继续使用标题6的配置，但是需要修改几个地方。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 在标题6中，有这句话&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.zhangsanLog = org.apache.log4j.DailyRollingFileAppender&lt;br/&gt; 这句话的意思：将日志追加到文件，问题是多久生成一个文件？&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 需要修改&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.zhangsanLog.DatePattern = '.'yyyy-MM-dd&lt;br/&gt; DatePattern=’.’yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分，即对应的格式如下：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 1)’.’yyyy-MM: 每月&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 2)’.’yyyy-ww: 每周&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 3)’.’yyyy-MM-dd: 每天&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 4)’.’yyyy-MM-dd-a: 每天两次&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 5)’.’yyyy-MM-dd-HH: 每小时&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 6)’.’yyyy-MM-dd-HH-mm: 每分钟&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 8、当文本文件为3KB大时新建一个文件&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 同样使用标题6的代码：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.zhangsanLog = org.apache.log4j.RollingFileAppender&lt;br/&gt; log4j.appender.zhangsanLog.File =G\:\\var\\alldata\\zhenduan\\debug.log&lt;br/&gt; #log4j.appender.zhangsanLog.File =/var/alldata/zhenduan/debug.log&lt;br/&gt; log4j.appender.zhangsanLog.Append = true&lt;br/&gt; ## 输出DEBUG级别以上的日志&lt;br/&gt; log4j.appender.zhangsanLog.Threshold = DEBUG&lt;br/&gt; #'.'yyyy-MM-dd: 每天产生一个新的文件&lt;br/&gt; log4j.appender.zhangsanLog.MaxFileSize = 2KB&lt;br/&gt; log4j.appender.zhangsanLog.MaxBackupIndex = 5&lt;br/&gt; log4j.appender.zhangsanLog.layout = org.apache.log4j.PatternLayout&lt;br/&gt; log4j.appender.zhangsanLog.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [%t:%r] - [%p] [%c{1}:%L] [%M] %m%n&lt;br/&gt; log4j.additivity.zhangsanLog = false&lt;br/&gt; 1&lt;br/&gt;  &lt;br/&gt; 这里修改的是&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.zhangsanLog = org.apache.log4j.RollingFileAppender&lt;br/&gt; MaxFileSize，当文件达到多大存储空间时，就新建一个文件MaxBackupIndex.&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 9、log4j将日志输出到数据库&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 后续补充&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 10、log4j将日志输出到hadoop框架中的hbase上&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 后续补充&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Log4j的日志级别&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 由低到高，可以联想到windows或unix的错误级别：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; debug： 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn（不算错误但是也请注意，比如以下depressed的方法）。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; error： 错误信息。用的也比较多。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j的配置，说明：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Log4j支持两种配置文件格式，一种是XML格式的文件，一种是properties格式的文件。一般我常用的是properties文件&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 1、log4j.rootLogger = [ level ] , appenderName, appenderName, …&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; level：是log4j的日志级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; appenderName：就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 2、 配置日志信息输出目的地Appender，其语法为：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.appenderName = fully.qualified.name.of.appender.class&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.appenderName.option1 = value1&lt;br/&gt; …&lt;br/&gt; log4j.appender.appenderName.option = valueN&lt;br/&gt; 其中，Log4j提供的appender有以下几种：&lt;br/&gt; org.apache.log4j.ConsoleAppender（控制台），&lt;br/&gt; org.apache.log4j.FileAppender（文件），&lt;br/&gt; org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），&lt;br/&gt; org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），&lt;br/&gt; org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）&lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 3、设置好appender后，针对appender的配置&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 也就是设置好要输出到什么地方后，其它配置选项&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; (1).ConsoleAppender选项&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Threshold=WARN:指定日志消息的输出最低层次。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Target=System.err：默认情况下是：System.out,指定输出控制台&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; (2).FileAppender 选项&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Threshold=WARN:指定日志消息的输出最低层次。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; File=mylog.txt:指定消息输出到mylog.txt文件。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; (3).DailyRollingFileAppender 选项&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Threshold=WARN:指定日志消息的输出最低层次。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; File=mylog.txt:指定消息输出到mylog.txt文件。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; DatePattern=’.’yyyy-ww:每周滚动一次文件，即每周产生一个新的文件。当然也可以指定按月、周、天、时和分。即对应的格式如下：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 1)’.’yyyy-MM: 每月&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 2)’.’yyyy-ww: 每周&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 3)’.’yyyy-MM-dd: 每天&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 4)’.’yyyy-MM-dd-a: 每天两次&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 5)’.’yyyy-MM-dd-HH: 每小时&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 6)’.’yyyy-MM-dd-HH-mm: 每分钟&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; (4).RollingFileAppender 选项&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Threshold=WARN:指定日志消息的输出最低层次。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; ImmediateFlush=true:默认值是true,意谓着所有的消息都会被立即输出。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; File=mylog.txt:指定消息输出到mylog.txt文件。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; Append=false:默认值是true,即将消息增加到指定文件中，false指将消息覆盖指定的文件内容。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; MaxFileSize=100KB: 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; MaxBackupIndex=2:指定可以产生的滚动文件的最大数。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 4. 配置日志信息的布局，其语法为：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class&lt;br/&gt; log4j.appender.appenderName.layout.option1 = value1&lt;br/&gt; …&lt;br/&gt; log4j.appender.appenderName.layout.option = valueN&lt;br/&gt; 其中，Log4j提供的layout有以下几种：&lt;br/&gt; org.apache.log4j.HTMLLayout（以HTML表格形式布局），&lt;br/&gt; org.apache.log4j.PatternLayout（可以灵活地指定布局模式），&lt;br/&gt; org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），&lt;br/&gt; org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 关于additivity&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.additivity.zhangsanLog = false&lt;br/&gt; 这个additivity也是很有意思的选项。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 它是 子Logger 是否继承 父Logger 的 输出源（appender） 的标志位。具体说，默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出。若是additivity设为false，则子Logger只会在自己的appender里输出，而不会在父Logger的appender里输出。&lt;br/&gt; 效果如下：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.rootLogger=WARN,A2,A3&lt;br/&gt; log4j.logger.test=DEBUG &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.A2=org.apache.log4j.RollingFileAppender&lt;br/&gt; log4j.appender.A2.File=../logs/test.log&lt;br/&gt; log4j.appender.A2.Encoding=UTF-8&lt;br/&gt; log4j.appender.A2.Append=true&lt;br/&gt; log4j.appender.A2.MaxFileSize=2MB&lt;br/&gt; log4j.appender.A2.MaxBackupIndex=5&lt;br/&gt; log4j.appender.A2.layout=org.apache.log4j.PatternLayout&lt;br/&gt; log4j.appender.A2.layout.ConversionPattern=%-5p %d [%t] %c{3}.%M - %m%n &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.additivity.test.xml=false&lt;br/&gt; log4j.logger.test.xml=DEBUG,A3 &lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.appender.A3=org.apache.log4j.RollingFileAppender&lt;br/&gt; log4j.appender.A3.File=../logs/test-xml.log&lt;br/&gt; log4j.appender.A3.Encoding=UTF-8&lt;br/&gt; log4j.appender.A3.Append=true&lt;br/&gt; log4j.appender.A3.MaxFileSize=2MB&lt;br/&gt; log4j.appender.A3.MaxBackupIndex=5&lt;br/&gt; log4j.appender.A3.layout=org.apache.log4j.PatternLayout&lt;br/&gt; log4j.appender.A3.layout.ConversionPattern=%-5p %d [%t] %c{3}.%M - %m%n&lt;br/&gt; 1&lt;br/&gt;  &lt;br/&gt; 配置文件中有&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; log4j.logger.test=DEBUG&lt;br/&gt; log4j.additivity.test.xml=false&lt;br/&gt; log4j.logger.test.xml=DEBUG,A3&lt;br/&gt; 这个实例中，通过log4j.additivity.test.xml=false这一句取消了继承关系，这样XML的log就只会在A3中输出.&lt;br/&gt; &lt;br/&gt; &lt;br/&gt;  另：&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 不kao虑日志级别，a.java, b.java, c.java 分别调用自己的logger，将日志分别写入到不同的文件中。&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 这个需求主要是在配置文件中，给appender取个名字&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; 然后在调用时，使用名称的方式调用&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; public static Logger loggerA = Logger.getLogger(“Alog”);&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; public static Logger loggerB = Logger.getLogger(“Blog”);&lt;br/&gt; &lt;br/&gt; &lt;br/&gt; public static Logger loggerC = Logger.getLogger(“Clog”);&lt;br/&gt;  &lt;br/&gt; &lt;br/&gt; &lt;/strong&gt;&lt;/span&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p style="font-family:'Microsoft Yahei', 'Helvetica Neue', Helvetica, Arial, sans-serif;font-size:13px;background-color:#FFFFFF;"&gt; &lt;br/&gt; &lt;/p&gt;&lt;/div&gt;</description><pubDate>2016-05-04 00:12</pubDate></item><item><title>proxychains-ng 工作原理分析 -  邪不能成圣 - 开源中国社区</title><link>http://my.oschina.net/xieyunzi/blog/669349</link><description>&lt;div class="BlogContent"&gt;&lt;/div&gt;</description><pubDate>2016-05-04 00:03</pubDate></item></channel></rss>
